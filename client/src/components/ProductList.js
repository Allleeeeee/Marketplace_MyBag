// components/ProductList.js
import React, { useContext, useEffect, useState } from 'react';
import { observer } from 'mobx-react-lite';
import { Context } from '../index';
import ProductItem from './ProductItem';
import SearchBar from './SearchBar';
import FiltersSidebar from './FiltersSidebar';
import '../css/components/ProductList.css';

const ProductList = observer(() => {
    const { product } = useContext(Context);
    const [allProducts, setAllProducts] = useState([]);
    const [showAllProducts, setShowAllProducts] = useState(false);
    const [showFilters, setShowFilters] = useState(true); // –§–∏–ª—å—Ç—Ä—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const loadAllProducts = async () => {
        try {
            const response = await fetch('http://localhost:5000/api/prod?limit=1000');
            if (response.ok) {
                const data = await response.json();
                setAllProducts(data.rows || data);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
        }
    };

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const handleShowAllProducts = async () => {
        setShowAllProducts(true);
        await loadAllProducts();
    };

    // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É
    const handleBackToSearch = () => {
        setShowAllProducts(false);
        setAllProducts([]);
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        if (!product.products.length && !product.isLoading && !product.hasActiveSearch) {
            product.fetchProducts();
        }
    }, [product]);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (product.isLoading) {
        return (
            <div className="product-page-container">
                <SearchBar />
                <div className="loading-container">
                    <div className="loading-spinner"></div>
                    <div className="loading-text">
                        {product.hasActiveSearch 
                            ? `–ò—â–µ–º "${product.currentSearchQuery}"...` 
                            : product.selectedCity 
                                ? `–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${product.selectedCity}...`
                                : '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...'
                        }
                    </div>
                </div>
            </div>
        );
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (product.error) {
        return (
            <div className="product-page-container">
                <SearchBar />
                <div className="error-container">
                    <div className="error-icon">‚ö†Ô∏è</div>
                    <div className="error-text">{product.error}</div>
                    <button 
                        className="retry-button"
                        onClick={() => product.fetchProducts()}
                    >
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (–∫–æ–≥–¥–∞ –ø–æ –ø–æ–∏—Å–∫—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å)
    if (showAllProducts) {
        return (
            <div className="product-page-container">
                <SearchBar />
                <div className="products-layout">
                    <div className="products-content">
                       

                        <div className="all-products-notice">
                            <div className="notice-content">
                                <div className="notice-icon">üì¶</div>
                                <div className="notice-text">
                                    –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                                </div>
                                <button 
                                    onClick={handleBackToSearch}
                                    className="back-to-search-button"
                                >
                                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É
                                </button>
                            </div>
                        </div>

                        {allProducts.length > 0 ? (
                            <div className="product-grid">
                                {allProducts.map(productItem => (
                                    <ProductItem key={productItem.id} product={productItem} />
                                ))}
                            </div>
                        ) : (
                            <div className="empty-container">
                                <div className="search-empty-content">
                                    <div className="search-empty-icon">üì¶</div>
                                    <div className="search-empty-title">
                                        –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="product-page-container">
            {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–≤–µ—Ä—Ö—É */}
            <SearchBar />
            
            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å–ª–µ–≤–∞ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —Å–ø—Ä–∞–≤–∞ */}
            <div className="products-layout">
                {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ */}
                {showFilters && <FiltersSidebar />}
                
                {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ç–æ–≤–∞—Ä–∞–º–∏ */}
                <div className="products-content">
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <div className="product-list-header">
                        <div className="header-content">
                            <h2 className="product-list-title">
                                {product.hasActiveSearch 
                                    ? `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${product.currentSearchQuery}"`
                                    : product.selectedCity 
                                        ? `–¢–æ–≤–∞—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ ${product.selectedCity}`
                                        : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã'
                                }
                            </h2>
                            {product.products.length > 0 && (
                                <div className="product-count-badge">
                                    {product.totalCount}
                                </div>
                            )}
                        </div>
                    </div>

                    {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
                    {product.products.length === 0 ? (
                        <div className="empty-container">
                            {product.hasActiveSearch ? (
                                // –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                                <div className="search-empty-content">
                                    <div className="search-empty-icon">üîç</div>
                                    <div className="search-empty-title">
                                        –ü–æ –∑–∞–ø—Ä–æ—Å—É "{product.currentSearchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                                    </div>
                                    <div className="search-empty-subtitle">
                                        –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                                    </div>
                                    <button 
                                        onClick={handleShowAllProducts}
                                        className="show-all-button"
                                    >
                                        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
                                    </button>
                                </div>
                            ) : (
                                // –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ
                                <div className="empty-city-container">
                                    <div className="empty-city-content">
                                        <div className="empty-city-icon">üèôÔ∏è</div>
                                        <div className="empty-city-title">
                                            –í –≥–æ—Ä–æ–¥–µ <strong>{product.selectedCity}</strong> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                                        </div>
                                        <div className="empty-city-subtitle">
                                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                                        </div>
                                        <button 
                                            onClick={handleShowAllProducts}
                                            className="show-all-button"
                                        >
                                            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    ) : (
                        // –ï—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
                        <>
                            <div className="product-grid">
                                {product.products.map(productItem => (
                                    <ProductItem key={productItem.id} product={productItem} />
                                ))}
                            </div>

                            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                            {product.totalCount > product.limit && (
                                <div className="pagination-container">
                                    <div className="pagination-info">
                                        –°—Ç—Ä–∞–Ω–∏—Ü–∞ {product.page} –∏–∑ {Math.ceil(product.totalCount / product.limit)}
                                    </div>
                                    <div className="pagination-controls">
                                        <button 
                                            className="pagination-button"
                                            disabled={product.page <= 1}
                                            onClick={async () => {
                                                product.setPage(product.page - 1);
                                                await product.fetchProducts();
                                            }}
                                        >
                                            –ù–∞–∑–∞–¥
                                        </button>
                                        <button 
                                            className="pagination-button"
                                            disabled={product.page >= Math.ceil(product.totalCount / product.limit)}
                                            onClick={async () => {
                                                product.setPage(product.page + 1);
                                                await product.fetchProducts();
                                            }}
                                        >
                                            –í–ø–µ—Ä–µ–¥
                                        </button>
                                    </div>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>
        </div>
    );
});

export default ProductList;