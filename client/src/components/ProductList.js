// components/ProductList.js
import React, { useContext, useEffect, useState } from 'react';
import { observer } from 'mobx-react-lite';
import { Context } from '../index';
import ProductItem from './ProductItem';
import '../css/components/ProductList.css';

const ProductList = observer(() => {
    const { product } = useContext(Context);
    const [nearbyCitiesProducts, setNearbyCitiesProducts] = useState([]);
    const [isLoadingNearby, setIsLoadingNearby] = useState(false);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    const getNearbyCities = (currentCity) => {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        const cityRegions = {
            '–ú–∏–Ω—Å–∫': ['–ú–∏–Ω—Å–∫', '–ë–æ—Ä–∏—Å–æ–≤', '–ú–æ–ª–æ–¥–µ—á–Ω–æ', '–°–æ–ª–∏–≥–æ—Ä—Å–∫', '–ñ–æ–¥–∏–Ω–æ'],
            '–ë—Ä–µ—Å—Ç': ['–ë—Ä–µ—Å—Ç', '–ü–∏–Ω—Å–∫', '–ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏', '–ö–æ–±—Ä–∏–Ω', '–õ—É–Ω–∏–Ω–µ—Ü'],
            '–ì—Ä–æ–¥–Ω–æ': ['–ì—Ä–æ–¥–Ω–æ', '–õ–∏–¥–∞', '–°–ª–æ–Ω–∏–º', '–í–æ–ª–∫–æ–≤—ã—Å–∫', '–©—É—á–∏–Ω'],
            '–ì–æ–º–µ–ª—å': ['–ì–æ–º–µ–ª—å', '–ú–æ–∑—ã—Ä—å', '–ñ–ª–æ–±–∏–Ω', '–†–µ—á–∏—Ü–∞', '–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫'],
            '–í–∏—Ç–µ–±—Å–∫': ['–í–∏—Ç–µ–±—Å–∫', '–û—Ä—à–∞', '–ü–æ–ª–æ—Ü–∫', '–ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫', '–ü–æ—Å—Ç–∞–≤—ã'],
            '–ú–æ–≥–∏–ª—ë–≤': ['–ú–æ–≥–∏–ª—ë–≤', '–ë–æ–±—Ä—É–π—Å–∫', '–û—Å–∏–ø–æ–≤–∏—á–∏', '–ì–æ—Ä–∫–∏', '–ö—Ä–∏—á–µ–≤']
        };

        // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏–æ–Ω —Ç–µ–∫—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        let region = null;
        for (const [regionName, cities] of Object.entries(cityRegions)) {
            if (cities.includes(currentCity)) {
                region = regionName;
                break;
            }
        }

        // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–∏–Ω—Å–∫ –∫–∞–∫ fallback
        if (!region) {
            region = '–ú–∏–Ω—Å–∫';
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–æ–≥–æ –∂–µ —Ä–µ–≥–∏–æ–Ω–∞, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π
        return cityRegions[region].filter(city => city !== currentCity);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–ª–∏–∂–∞–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    const loadNearbyCitiesProducts = async (currentCity) => {
        if (!currentCity) return;

        setIsLoadingNearby(true);
        try {
            const nearbyCities = getNearbyCities(currentCity);
            const productsPromises = nearbyCities.map(async (city) => {
                try {
                    const response = await fetch(`http://localhost:5000/api/prod/city/${encodeURIComponent(city)}`);
                    if (response.ok) {
                        const data = await response.json();
                        return {
                            city: city,
                            products: data.slice(0, 6), // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 —Ç–æ–≤–∞—Ä–æ–≤
                            count: data.length
                        };
                    }
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è ${city}:`, error);
                }
                return null;
            });

            const results = await Promise.all(productsPromises);
            const validResults = results.filter(result => result && result.products.length > 0);
            setNearbyCitiesProducts(validResults);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤:', error);
        } finally {
            setIsLoadingNearby(false);
        }
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        if (!product.products.length && !product.isLoading) {
            if (product.selectedCity) {
                product.fetchProductsByCity(product.selectedCity);
            } else {
                product.fetchProducts();
            }
        }
    }, [product]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤, –µ—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ—Ä–æ–¥–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
    useEffect(() => {
        if (product.products.length === 0 && product.selectedCity && !product.isLoading) {
            loadNearbyCitiesProducts(product.selectedCity);
        } else {
            setNearbyCitiesProducts([]);
        }
    }, [product.products.length, product.selectedCity, product.isLoading]);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (product.isLoading) {
        return (
            <div className="loading-container">
                <div className="loading-spinner"></div>
                <div className="loading-text">
                    {product.selectedCity 
                        ? `–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${product.selectedCity}...`
                        : '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...'
                    }
                </div>
            </div>
        );
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (product.error) {
        return (
            <div className="error-container">
                <div className="error-icon">‚ö†Ô∏è</div>
                <div className="error-text">{product.error}</div>
                <button 
                    className="retry-button"
                    onClick={() => {
                        if (product.selectedCity) {
                            product.fetchProductsByCity(product.selectedCity);
                        } else {
                            product.fetchProducts();
                        }
                    }}
                >
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (!product.products || !Array.isArray(product.products)) {
        return (
            <div className="loading-container">
                <div className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
            </div>
        );
    }

    return (
        <div className="product-list-container">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–æ–¥–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–æ–≤ */}
            <div className="product-list-header">
                <h2 className="product-list-title">
                    {product.selectedCity 
                        ? `–¢–æ–≤–∞—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ ${product.selectedCity}`
                        : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã'
                    }
                </h2>
                {product.products.length > 0 && (
                    <div className="product-count">
                        –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {product.totalCount}
                    </div>
                )}
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
            {product.products.length === 0 ? (
                <div className="empty-city-container">
                    <div className="empty-city-content">
                        <div className="empty-city-icon">üèôÔ∏è</div>
                        <div className="empty-city-title">
                            –í –≥–æ—Ä–æ–¥–µ <strong>{product.selectedCity}</strong> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                        </div>
                        <div className="empty-city-subtitle">
                            –ù–æ –≤–æ—Ç —á—Ç–æ –µ—Å—Ç—å –≤ nearby –≥–æ—Ä–æ–¥–∞—Ö...
                        </div>

                        {/* –¢–æ–≤–∞—Ä—ã –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ */}
                        {isLoadingNearby ? (
                            <div className="nearby-loading">
                                <div className="loading-spinner-small"></div>
                                –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ nearby –≥–æ—Ä–æ–¥–∞—Ö...
                            </div>
                        ) : nearbyCitiesProducts.length > 0 ? (
                            <div className="nearby-cities-section">
                                {nearbyCitiesProducts.map((cityData, index) => (
                                    <div key={index} className="nearby-city-group">
                                        <div className="nearby-city-header">
                                            <h4 className="nearby-city-name">
                                                üèôÔ∏è {cityData.city}
                                            </h4>
                                            <span className="nearby-city-count">
                                                {cityData.count} —Ç–æ–≤–∞—Ä–æ–≤
                                            </span>
                                        </div>
                                        <div className="nearby-products-grid">
                                            {cityData.products.map(productItem => (
                                                <ProductItem 
                                                    key={`${cityData.city}-${productItem.id}`} 
                                                    product={productItem} 
                                                />
                                            ))}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="no-nearby-products">
                                <div className="no-nearby-icon">üîç</div>
                                <div className="no-nearby-text">
                                    –í nearby –≥–æ—Ä–æ–¥–∞—Ö —Ç–æ–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                                </div>
                                <button 
                                    className="show-all-button"
                                    onClick={() => product.resetFilters()}
                                >
                                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            ) : (
                /* –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ */
                <>
                    <div className="product-grid">
                        {product.products.map(productItem => (
                            <ProductItem key={productItem.id} product={productItem} />
                        ))}
                    </div>

                    {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                    {product.totalCount > product.limit && (
                        <div className="pagination-container">
                            <div className="pagination-info">
                                –°—Ç—Ä–∞–Ω–∏—Ü–∞ {product.page} –∏–∑ {Math.ceil(product.totalCount / product.limit)}
                            </div>
                            <div className="pagination-controls">
                                <button 
                                    className="pagination-button"
                                    disabled={product.page <= 1}
                                    onClick={() => product.setPage(product.page - 1)}
                                >
                                    –ù–∞–∑–∞–¥
                                </button>
                                <button 
                                    className="pagination-button"
                                    disabled={product.page >= Math.ceil(product.totalCount / product.limit)}
                                    onClick={() => product.setPage(product.page + 1)}
                                >
                                    –í–ø–µ—Ä–µ–¥
                                </button>
                            </div>
                        </div>
                    )}
                </>
            )}
        </div>
    );
});

export default ProductList;