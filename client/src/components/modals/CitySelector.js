// components/modals/CitySelector.js
import React, { useState, useEffect } from 'react';
import { Modal, Button, Tabs, Tab, Spinner, Form, Alert } from 'react-bootstrap';

const CitySelectorModal = ({ 
    show, 
    handleClose, 
    cities, 
    selectedCity, 
    handleCityChange,
    onDetectLocation,
    isLoading 
}) => {
    const [activeTab, setActiveTab] = useState('list');
    const [searchTerm, setSearchTerm] = useState('');
    const [filteredCities, setFilteredCities] = useState([]);
    const [mapError, setMapError] = useState('');

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
    useEffect(() => {
        if (searchTerm) {
            const filtered = cities.filter(city => 
                city.toLowerCase().includes(searchTerm.toLowerCase())
            );
            setFilteredCities(filtered);
        } else {
            setFilteredCities(cities);
        }
    }, [searchTerm, cities]);

    const handleTabSelect = (tab) => {
        setActiveTab(tab);
        setMapError('');
    };

    const handleSearchChange = (e) => {
        setSearchTerm(e.target.value);
    };

    const handleCitySelect = (city) => {
        const mockEvent = {
            target: { value: city }
        };
        handleCityChange(mockEvent);
        handleClose();
    };

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
    const cityCoordinates = {
        '–ú–∏–Ω—Å–∫': { top: '43%', left: '45%' },
        '–ë—Ä–µ—Å—Ç': { top: '68%', left: '25%' },
        '–ì—Ä–æ–¥–Ω–æ': { top: '35%', left: '30%' },
        '–ì–æ–º–µ–ª—å': { top: '55%', left: '70%' },
        '–í–∏—Ç–µ–±—Å–∫': { top: '25%', left: '60%' },
        '–ú–æ–≥–∏–ª—ë–≤': { top: '45%', left: '65%' },
        '–ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏': { top: '52%', left: '38%' },
        '–ë–æ—Ä–∏—Å–æ–≤': { top: '40%', left: '50%' },
        '–ü–∏–Ω—Å–∫': { top: '62%', left: '32%' },
        '–û—Ä—à–∞': { top: '35%', left: '55%' },
        '–õ–∏–¥–∞': { top: '38%', left: '35%' },
        '–ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫': { top: '28%', left: '55%' },
        '–ü–æ–ª–æ—Ü–∫': { top: '30%', left: '53%' },
        '–ú–æ–ª–æ–¥–µ—á–Ω–æ': { top: '38%', left: '42%' },
        '–°–æ–ª–∏–≥–æ—Ä—Å–∫': { top: '50%', left: '42%' },
        '–ñ–ª–æ–±–∏–Ω': { top: '52%', left: '62%' }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
    const renderCityButtons = () => {
        return Object.entries(cityCoordinates).map(([cityName, coords]) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            if (!cities.includes(cityName)) return null;

            const isSelected = selectedCity === cityName;
            
            return (
                <button
                    key={cityName}
                    style={{
                        position: 'absolute',
                        top: coords.top,
                        left: coords.left,
                        background: isSelected ? '#007bff' : 'rgba(255, 255, 255, 0.95)',
                        border: `2px solid ${isSelected ? '#0056b3' : '#007bff'}`,
                        color: isSelected ? 'white' : '#007bff',
                        fontWeight: '600',
                        cursor: 'pointer',
                        fontSize: '12px',
                        padding: '8px 12px',
                        borderRadius: '20px',
                        boxShadow: '0 3px 10px rgba(0, 0, 0, 0.2)',
                        transform: 'translate(-50%, -50%)',
                        zIndex: 2,
                        minWidth: '80px',
                        transition: 'all 0.3s ease',
                        whiteSpace: 'nowrap',
                        fontFamily: 'Arial, sans-serif',
                        textShadow: isSelected ? '0 1px 2px rgba(0,0,0,0.3)' : 'none'
                    }}
                    onClick={() => handleCitySelect(cityName)}
                    title={`–í—ã–±—Ä–∞—Ç—å ${cityName}`}
                    onMouseEnter={(e) => {
                        if (!isSelected) {
                            e.target.style.background = '#e3f2fd';
                            e.target.style.transform = 'translate(-50%, -50%) scale(1.15)';
                            e.target.style.boxShadow = '0 5px 15px rgba(0, 123, 255, 0.4)';
                        }
                    }}
                    onMouseLeave={(e) => {
                        if (!isSelected) {
                            e.target.style.background = 'rgba(255, 255, 255, 0.95)';
                            e.target.style.transform = 'translate(-50%, -50%) scale(1)';
                            e.target.style.boxShadow = '0 3px 10px rgba(0, 0, 0, 0.2)';
                        }
                    }}
                >
                    {cityName}
                </button>
            );
        });
    };

    return (
        <Modal show={show} onHide={handleClose} size="lg" centered>
            <Modal.Header closeButton style={{ backgroundColor: '#f8f9fa', borderBottom: '2px solid #dee2e6' }}>
                <Modal.Title style={{ color: '#333', fontWeight: '600' }}>
                    üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥
                </Modal.Title>
            </Modal.Header>
            
            <Modal.Body style={{ padding: '25px' }}>
                {mapError && (
                    <Alert variant="warning" className="mb-3">
                        {mapError}
                    </Alert>
                )}
                
                <Tabs 
                    activeKey={activeTab} 
                    onSelect={handleTabSelect} 
                    className="mb-4"
                    style={{ borderBottom: '2px solid #dee2e6' }}
                >
                    {/* –í–∫–ª–∞–¥–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤ */}
                    <Tab eventKey="list" title={
                        <span style={{ fontWeight: '600', fontSize: '14px' }}>
                            üìã –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
                        </span>
                    }>
                        <div style={{ marginBottom: '20px' }}>
                            <div className="d-flex justify-content-between align-items-center mb-3">
                                <Button 
                                    variant="outline-primary" 
                                    onClick={onDetectLocation}
                                    disabled={isLoading}
                                    size="sm"
                                    style={{ borderRadius: '20px', fontWeight: '600' }}
                                >
                                    {isLoading ? (
                                        <>
                                            <Spinner animation="border" size="sm" className="me-2" />
                                            –û–ø—Ä–µ–¥–µ–ª—è–µ–º...
                                        </>
                                    ) : (
                                        'üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
                                    )}
                                </Button>
                                
                                {selectedCity && (
                                    <span className="text-success" style={{ fontWeight: '600' }}>
                                        ‚úÖ –í—ã–±—Ä–∞–Ω: {selectedCity}
                                    </span>
                                )}
                            </div>

                            <Form.Group>
                                <Form.Label style={{ fontWeight: '600', color: '#555' }}>
                                    üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞:
                                </Form.Label>
                                <Form.Control
                                    type="text"
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞..."
                                    value={searchTerm}
                                    onChange={handleSearchChange}
                                    style={{ 
                                        borderRadius: '10px', 
                                        border: '2px solid #e9ecef',
                                        padding: '12px 15px',
                                        fontSize: '14px'
                                    }}
                                />
                            </Form.Group>
                        </div>

                        <div style={{ maxHeight: '400px', overflowY: 'auto', border: '1px solid #e9ecef', borderRadius: '10px' }}>
                            <div style={{ padding: '15px', backgroundColor: '#f8f9fa', borderBottom: '1px solid #dee2e6' }}>
                                <strong style={{ color: '#555' }}>
                                    –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ ({filteredCities.length})
                                </strong>
                            </div>
                            
                            {filteredCities.length > 0 ? (
                                <div className="list-group" style={{ borderRadius: '0 0 10px 10px' }}>
                                    {filteredCities.map((city) => (
                                        <button
                                            key={city}
                                            type="button"
                                            className={`list-group-item list-group-item-action ${
                                                selectedCity === city ? 'active' : ''
                                            }`}
                                            onClick={() => handleCitySelect(city)}
                                            style={{
                                                border: 'none',
                                                borderBottom: '1px solid #f8f9fa',
                                                borderRadius: '0',
                                                padding: '15px 20px',
                                                fontSize: '14px',
                                                fontWeight: selectedCity === city ? '600' : '400'
                                            }}
                                        >
                                            <div className="d-flex justify-content-between align-items-center">
                                                <span>{city}</span>
                                                {selectedCity === city && (
                                                    <span 
                                                        className="badge" 
                                                        style={{ 
                                                            backgroundColor: 'rgba(255,255,255,0.2)',
                                                            color: 'white',
                                                            fontSize: '12px'
                                                        }}
                                                    >
                                                        ‚úì –í—ã–±—Ä–∞–Ω
                                                    </span>
                                                )}
                                            </div>
                                        </button>
                                    ))}
                                </div>
                            ) : (
                                <div className="text-center text-muted py-5">
                                    {searchTerm ? (
                                        <div>
                                            <div style={{ fontSize: '48px', marginBottom: '15px' }}>üîç</div>
                                            <div style={{ fontSize: '16px', marginBottom: '5px' }}>–ì–æ—Ä–æ–¥ "{searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
                                            <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞</small>
                                        </div>
                                    ) : (
                                        <div>
                                            <Spinner animation="border" className="me-2" />
                                            <div className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...</div>
                                        </div>
                                    )}
                                </div>
                            )}
                        </div>
                    </Tab>

                    {/* –í–∫–ª–∞–¥–∫–∞ —Å –∫–∞—Ä—Ç–æ–π */}
                    <Tab eventKey="map" title={
                        <span style={{ fontWeight: '600', fontSize: '14px' }}>
                            üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
                        </span>
                    }>
                        <div style={{ marginBottom: '15px' }}>
                            <p style={{ color: '#666', marginBottom: '20px', fontSize: '14px' }}>
                                üí° <strong>–ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</strong>
                            </p>
                            
                            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
                            <div 
                                style={{ 
                                    position: 'relative', 
                                    width: '100%', 
                                    height: '450px',
                                    backgroundImage: `url('https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Belarus_%28centered%29.svg/1200px-Belarus_%28centered%29.svg.png')`,
                                    backgroundSize: 'contain',
                                    backgroundRepeat: 'no-repeat',
                                    backgroundPosition: 'center center',
                                    backgroundColor: '#e8f4f8',
                                    border: '3px solid #dee2e6',
                                    borderRadius: '12px',
                                    boxShadow: 'inset 0 0 20px rgba(0,0,0,0.1)',
                                    backgroundBlendMode: 'multiply'
                                }}
                            >
                                {renderCityButtons()}
                                
                                {/* –õ–µ–≥–µ–Ω–¥–∞ –∫–∞—Ä—Ç—ã */}
                                <div 
                                    style={{
                                        position: 'absolute',
                                        bottom: '15px',
                                        left: '15px',
                                        background: 'rgba(255, 255, 255, 0.95)',
                                        padding: '10px 15px',
                                        borderRadius: '8px',
                                        fontSize: '12px',
                                        border: '1px solid #ddd',
                                        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                                        fontWeight: '600'
                                    }}
                                >
                                    üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ë–µ–ª–∞—Ä—É—Å–∏
                                </div>
                                
                                {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
                                <div 
                                    style={{
                                        position: 'absolute',
                                        top: '15px',
                                        right: '15px',
                                        background: 'rgba(40, 167, 69, 0.9)',
                                        color: 'white',
                                        padding: '8px 12px',
                                        borderRadius: '20px',
                                        fontSize: '11px',
                                        fontWeight: '600'
                                    }}
                                >
                                    üéØ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥
                                </div>
                            </div>
                            
                            <div className="mt-3 text-center">
                                <small className="text-muted">
                                    –û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ë–µ–ª–∞—Ä—É—Å–∏. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"
                                </small>
                            </div>
                        </div>
                    </Tab>
                </Tabs>
            </Modal.Body>
            
            <Modal.Footer style={{ backgroundColor: '#f8f9fa', borderTop: '2px solid #dee2e6', padding: '20px' }}>
                <div className="w-100 d-flex justify-content-between align-items-center">
                    <div>
                        {selectedCity ? (
                            <span style={{ color: '#28a745', fontWeight: '600', fontSize: '16px' }}>
                                ‚úÖ –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: <strong>{selectedCity}</strong>
                            </span>
                        ) : (
                            <span style={{ color: '#6c757d', fontWeight: '500' }}>
                                ‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                            </span>
                        )}
                    </div>
                    <div>
                        <Button 
                            variant="outline-secondary" 
                            onClick={handleClose} 
                            className="me-2"
                            style={{ borderRadius: '8px', fontWeight: '600' }}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        {selectedCity && (
                            <Button 
                                variant="primary" 
                                onClick={handleClose}
                                style={{ borderRadius: '8px', fontWeight: '600', padding: '8px 20px' }}
                            >
                                ‚úÖ –í—ã–±—Ä–∞—Ç—å {selectedCity}
                            </Button>
                        )}
                    </div>
                </div>
            </Modal.Footer>
        </Modal>
    );
};

export default CitySelectorModal;