{"ast":null,"code":"import { $authHost, $host } from \"./index\";\nimport { jwtDecode } from \"jwt-decode\";\n\n// Убедитесь, что API_URL соответствует вашему бэкенду\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const registration = async (email, password) => {\n  try {\n    const {\n      data\n    } = await $host.post('api/user/registration', {\n      username: 'new user',\n      email,\n      password,\n      role: 'ADMIN'\n    });\n    localStorage.setItem('token', data.token);\n    return jwtDecode(data.token);\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    const {\n      data\n    } = await $host.post('api/user/login', {\n      email,\n      password\n    });\n    localStorage.setItem('token', data.token);\n    return jwtDecode(data.token);\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nexport const check = async () => {\n  try {\n    const {\n      data\n    } = await $authHost.get('api/user/auth');\n    localStorage.setItem('token', data.token);\n    return jwtDecode(data.token);\n  } catch (error) {\n    console.error('Auth check error:', error);\n    throw error;\n  }\n};\nexport const getUserInfo = async userId => {\n  try {\n    const {\n      data\n    } = await $authHost.get(`api/user/${userId}`);\n    return data;\n  } catch (error) {\n    console.error('Get user info error:', error);\n    throw error;\n  }\n};\nexport const getSellerInfo = async sellerId => {\n  try {\n    const {\n      data\n    } = await $authHost.get(`api/seller/${sellerId}`);\n    return data;\n  } catch (error) {\n    console.error('Get seller info error:', error);\n    throw error;\n  }\n};\n\n// Функция для обновления пользователя\nexport const updateUser = async (userId, userData) => {\n  try {\n    const {\n      data\n    } = await $authHost.put(`api/user/${userId}`, userData);\n    return data;\n  } catch (error) {\n    console.error('Update user error:', error);\n    throw error;\n  }\n};\n\n// Функция для обновления продавца\nexport const updateSeller = async (sellerId, sellerData) => {\n  try {\n    const {\n      data\n    } = await $authHost.put(`api/seller/${sellerId}`, sellerData);\n    return data;\n  } catch (error) {\n    console.error('Update seller error:', error);\n    throw error;\n  }\n};\n\n// Исправленная функция для обновления изображения продавца\nexport const updateSellerImage = async (id, formData) => {\n  try {\n    // Используем $authHost вместо чистого axios\n    const response = await $authHost.put(`api/seller/${id}/image`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Update seller image error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["$authHost","$host","jwtDecode","API_URL","process","env","REACT_APP_API_URL","registration","email","password","data","post","username","role","localStorage","setItem","token","error","console","login","check","get","getUserInfo","userId","getSellerInfo","sellerId","updateUser","userData","put","updateSeller","sellerData","updateSellerImage","id","formData","response","headers"],"sources":["D:/nkurs/client/src/http/userAPI.js"],"sourcesContent":["import { $authHost, $host } from \"./index\";\r\nimport { jwtDecode } from \"jwt-decode\"; \r\n\r\n// Убедитесь, что API_URL соответствует вашему бэкенду\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport const registration = async (email, password) => {\r\n    try {\r\n        const { data } = await $host.post('api/user/registration', {\r\n            username: 'new user',\r\n            email, \r\n            password, \r\n            role: 'ADMIN'\r\n        });\r\n        localStorage.setItem('token', data.token);\r\n        return jwtDecode(data.token); \r\n    } catch (error) {\r\n        console.error('Registration error:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const login = async (email, password) => {\r\n    try {\r\n        const { data } = await $host.post('api/user/login', { email, password });\r\n        localStorage.setItem('token', data.token);\r\n        return jwtDecode(data.token); \r\n    } catch (error) {\r\n        console.error('Login error:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const check = async () => {\r\n    try {\r\n        const { data } = await $authHost.get('api/user/auth');\r\n        localStorage.setItem('token', data.token);\r\n        return jwtDecode(data.token); \r\n    } catch (error) {\r\n        console.error('Auth check error:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getUserInfo = async (userId) => {\r\n    try {\r\n        const { data } = await $authHost.get(`api/user/${userId}`);\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Get user info error:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getSellerInfo = async (sellerId) => {\r\n    try {\r\n        const { data } = await $authHost.get(`api/seller/${sellerId}`);\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Get seller info error:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Функция для обновления пользователя\r\nexport const updateUser = async (userId, userData) => {\r\n    try {\r\n        const { data } = await $authHost.put(`api/user/${userId}`, userData);\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Update user error:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Функция для обновления продавца\r\nexport const updateSeller = async (sellerId, sellerData) => {\r\n    try {\r\n        const { data } = await $authHost.put(`api/seller/${sellerId}`, sellerData);\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Update seller error:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Исправленная функция для обновления изображения продавца\r\nexport const updateSellerImage = async (id, formData) => {\r\n    try {\r\n        // Используем $authHost вместо чистого axios\r\n        const response = await $authHost.put(`api/seller/${id}/image`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Update seller image error:', error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}