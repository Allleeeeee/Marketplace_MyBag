{"ast":null,"code":"// store/ProductStore.js\nimport { makeAutoObservable } from 'mobx';\nclass ProductStore {\n  constructor() {\n    this.products = [];\n    this.totalCount = 0;\n    this.limit = 9;\n    this.page = 1;\n    this.selectedCity = '';\n    this.isLoading = false;\n    this.error = null;\n    this.cities = [];\n    this.currentSearchQuery = '';\n    makeAutoObservable(this);\n    this.initializeCity();\n  }\n\n  // Инициализация города при загрузке store\n  initializeCity() {\n    const savedCity = sessionStorage.getItem('city');\n    if (savedCity) {\n      this.selectedCity = savedCity;\n    }\n  }\n  setProducts(products) {\n    this.products = products;\n  }\n  setTotalCount(count) {\n    this.totalCount = count;\n  }\n  setPage(page) {\n    this.page = page;\n  }\n  setSelectedCity(city) {\n    this.selectedCity = city;\n    sessionStorage.setItem('city', city);\n  }\n  setLoading(loading) {\n    this.isLoading = loading;\n  }\n  setError(error) {\n    this.error = error;\n  }\n  setCities(cities) {\n    this.cities = cities;\n  }\n  setCurrentSearchQuery(query) {\n    this.currentSearchQuery = query;\n  }\n\n  // Получение списка городов из БД\n  async fetchCities() {\n    try {\n      const response = await fetch('http://localhost:5000/api/prod/cities');\n      if (response.ok) {\n        const data = await response.json();\n        this.setCities(data);\n        return data;\n      }\n    } catch (error) {\n      console.error('Ошибка при получении городов:', error);\n    }\n    return [];\n  }\n\n  // store/ProductStore.js - обновленный метод fetchProducts\n  // store/ProductStore.js - обновленный метод fetchProducts\n  // store/ProductStore.js - обновленный метод fetchProducts\n  async fetchProducts(filters = {}) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      let url = `http://localhost:5000/api/prod?limit=1000`;\n      const queryParams = new URLSearchParams();\n      if (this.selectedCity) {\n        queryParams.append('city', this.selectedCity);\n      }\n      if (filters.typeId) {\n        queryParams.append('typeId', filters.typeId);\n      }\n      if (filters.sellerId) {\n        queryParams.append('sellerId', filters.sellerId);\n      }\n      const queryString = queryParams.toString();\n      if (queryString) {\n        url += `&${queryString}`;\n      }\n      console.log('Fetch URL:', url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      let allProducts = data.rows || data;\n\n      // ПОИСК НА ФРОНТЕНДЕ\n      if (this.currentSearchQuery) {\n        const searchTerm = this.currentSearchQuery.toLowerCase().trim();\n        allProducts = allProducts.filter(product => product.name.toLowerCase().includes(searchTerm) || product.description && product.description.toLowerCase().includes(searchTerm) || product.price_text && product.price_text.toLowerCase().includes(searchTerm));\n      }\n\n      // ФИЛЬТРАЦИЯ ПО КАТЕГОРИИ\n      if (filters.categoryId) {\n        allProducts = allProducts.filter(product => product.type_id == filters.categoryId);\n      }\n\n      // ФИЛЬТРАЦИЯ ПО ХАРАКТЕРИСТИКАМ\n      if (filters.characteristics && Object.keys(filters.characteristics).length > 0) {\n        allProducts = allProducts.filter(product => {\n          if (!product.info || !Array.isArray(product.info)) return false;\n          return Object.entries(filters.characteristics).every(([charTitle, charValues]) => {\n            const productChar = product.info.find(info => info.title === charTitle);\n            if (!productChar) return false;\n            return charValues.includes(productChar.description);\n          });\n        });\n      }\n\n      // ФИЛЬТРАЦИЯ ПО ЦЕНЕ (исправленная логика)\n      if (filters.minPrice) {\n        const minPrice = parseFloat(filters.minPrice);\n        allProducts = allProducts.filter(product => {\n          // Исключаем товары без цены или с ценой 0 при minPrice > 0\n          if (product.price === null || product.price === undefined || product.price === 0) {\n            return false; // Исключаем товары без цены\n          }\n          return product.price >= minPrice;\n        });\n      }\n      if (filters.maxPrice) {\n        const maxPrice = parseFloat(filters.maxPrice);\n        allProducts = allProducts.filter(product => {\n          // Для maxPrice включаем только товары с ценой\n          if (product.price === null || product.price === undefined || product.price === 0) {\n            return false; // Исключаем товары без цены\n          }\n          return product.price <= maxPrice;\n        });\n      }\n\n      // СОРТИРОВКА\n      if (filters.sortBy) {\n        switch (filters.sortBy) {\n          case 'price_asc':\n            allProducts.sort((a, b) => {\n              const priceA = a.price || 0;\n              const priceB = b.price || 0;\n              return priceA - priceB;\n            });\n            break;\n          case 'price_desc':\n            allProducts.sort((a, b) => {\n              const priceA = a.price || 0;\n              const priceB = b.price || 0;\n              return priceB - priceA;\n            });\n            break;\n          case 'name_asc':\n            allProducts.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n            break;\n          case 'name_desc':\n            allProducts.sort((a, b) => (b.name || '').localeCompare(a.name || ''));\n            break;\n          case 'newest':\n          default:\n            allProducts.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));\n            break;\n        }\n      }\n\n      // Пагинация на фронтенде\n      const startIndex = (this.page - 1) * this.limit;\n      const endIndex = startIndex + this.limit;\n      const paginatedProducts = allProducts.slice(startIndex, endIndex);\n      this.setProducts(paginatedProducts);\n      this.setTotalCount(allProducts.length);\n    } catch (error) {\n      console.error('Ошибка при получении продуктов:', error);\n      this.setError('Не удалось загрузить товары');\n      this.setProducts([]);\n      this.setTotalCount(0);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n  // Получение продуктов по конкретному городу (для обратной совместимости)\n  async fetchProductsByCity(city) {\n    this.setSelectedCity(city);\n    this.setCurrentSearchQuery(''); // Сбрасываем поиск при смене города\n    await this.fetchProducts();\n  }\n\n  // Поиск товаров - использует fetchProducts\n  async searchProducts(searchQuery) {\n    this.setCurrentSearchQuery(searchQuery);\n    await this.fetchProducts();\n  }\n\n  // Смена города - использует fetchProducts\n  async changeCity(city) {\n    await this.fetchProductsByCity(city);\n  }\n\n  // Сброс поиска\n  async clearSearch() {\n    this.setCurrentSearchQuery('');\n    await this.fetchProducts();\n  }\n\n  // Сброс всех фильтров\n  async resetFilters() {\n    this.setSelectedCity('');\n    this.setCurrentSearchQuery('');\n    sessionStorage.removeItem('city');\n    await this.fetchProducts();\n  }\n\n  // Получение текущего города\n  get currentCity() {\n    return this.selectedCity || sessionStorage.getItem('city') || 'Выберите город';\n  }\n\n  // Есть ли выбранный город\n  get hasSelectedCity() {\n    return !!this.selectedCity;\n  }\n\n  // Есть ли активный поиск\n  get hasActiveSearch() {\n    return !!this.currentSearchQuery;\n  }\n}\n\n// Создаем экземпляр store\nexport const productStore = new ProductStore();","map":{"version":3,"names":["makeAutoObservable","ProductStore","constructor","products","totalCount","limit","page","selectedCity","isLoading","error","cities","currentSearchQuery","initializeCity","savedCity","sessionStorage","getItem","setProducts","setTotalCount","count","setPage","setSelectedCity","city","setItem","setLoading","loading","setError","setCities","setCurrentSearchQuery","query","fetchCities","response","fetch","ok","data","json","console","fetchProducts","filters","url","queryParams","URLSearchParams","append","typeId","sellerId","queryString","toString","log","Error","status","allProducts","rows","searchTerm","toLowerCase","trim","filter","product","name","includes","description","price_text","categoryId","type_id","characteristics","Object","keys","length","info","Array","isArray","entries","every","charTitle","charValues","productChar","find","title","minPrice","parseFloat","price","undefined","maxPrice","sortBy","sort","a","b","priceA","priceB","localeCompare","Date","createdAt","startIndex","endIndex","paginatedProducts","slice","fetchProductsByCity","searchProducts","searchQuery","changeCity","clearSearch","resetFilters","removeItem","currentCity","hasSelectedCity","hasActiveSearch","productStore"],"sources":["D:/nkurs/client/src/store/ProductStore.js"],"sourcesContent":["// store/ProductStore.js\r\nimport { makeAutoObservable } from 'mobx';\r\n\r\nclass ProductStore {\r\n    products = [];\r\n    totalCount = 0;\r\n    limit = 9;\r\n    page = 1;\r\n    selectedCity = '';\r\n    isLoading = false;\r\n    error = null;\r\n    cities = [];\r\n    currentSearchQuery = '';\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.initializeCity();\r\n    }\r\n\r\n    // Инициализация города при загрузке store\r\n    initializeCity() {\r\n        const savedCity = sessionStorage.getItem('city');\r\n        if (savedCity) {\r\n            this.selectedCity = savedCity;\r\n        }\r\n    }\r\n\r\n    setProducts(products) {\r\n        this.products = products;\r\n    }\r\n\r\n    setTotalCount(count) {\r\n        this.totalCount = count;\r\n    }\r\n\r\n    setPage(page) {\r\n        this.page = page;\r\n    }\r\n\r\n    setSelectedCity(city) {\r\n        this.selectedCity = city;\r\n        sessionStorage.setItem('city', city);\r\n    }\r\n\r\n    setLoading(loading) {\r\n        this.isLoading = loading;\r\n    }\r\n\r\n    setError(error) {\r\n        this.error = error;\r\n    }\r\n\r\n    setCities(cities) {\r\n        this.cities = cities;\r\n    }\r\n\r\n    setCurrentSearchQuery(query) {\r\n        this.currentSearchQuery = query;\r\n    }\r\n\r\n    // Получение списка городов из БД\r\n    async fetchCities() {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/prod/cities');\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                this.setCities(data);\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при получении городов:', error);\r\n        }\r\n        return [];\r\n    }\r\n\r\n  // store/ProductStore.js - обновленный метод fetchProducts\r\n// store/ProductStore.js - обновленный метод fetchProducts\r\n// store/ProductStore.js - обновленный метод fetchProducts\r\nasync fetchProducts(filters = {}) {\r\n    this.setLoading(true);\r\n    this.setError(null);\r\n    \r\n    try {\r\n        let url = `http://localhost:5000/api/prod?limit=1000`;\r\n        \r\n        const queryParams = new URLSearchParams();\r\n        \r\n        if (this.selectedCity) {\r\n            queryParams.append('city', this.selectedCity);\r\n        }\r\n        \r\n        if (filters.typeId) {\r\n            queryParams.append('typeId', filters.typeId);\r\n        }\r\n        if (filters.sellerId) {\r\n            queryParams.append('sellerId', filters.sellerId);\r\n        }\r\n        \r\n        const queryString = queryParams.toString();\r\n        if (queryString) {\r\n            url += `&${queryString}`;\r\n        }\r\n\r\n        console.log('Fetch URL:', url);\r\n\r\n        const response = await fetch(url);\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        let allProducts = data.rows || data;\r\n\r\n        // ПОИСК НА ФРОНТЕНДЕ\r\n        if (this.currentSearchQuery) {\r\n            const searchTerm = this.currentSearchQuery.toLowerCase().trim();\r\n            allProducts = allProducts.filter(product => \r\n                product.name.toLowerCase().includes(searchTerm) ||\r\n                (product.description && product.description.toLowerCase().includes(searchTerm)) ||\r\n                (product.price_text && product.price_text.toLowerCase().includes(searchTerm))\r\n            );\r\n        }\r\n\r\n        // ФИЛЬТРАЦИЯ ПО КАТЕГОРИИ\r\n        if (filters.categoryId) {\r\n            allProducts = allProducts.filter(product => \r\n                product.type_id == filters.categoryId\r\n            );\r\n        }\r\n\r\n        // ФИЛЬТРАЦИЯ ПО ХАРАКТЕРИСТИКАМ\r\n        if (filters.characteristics && Object.keys(filters.characteristics).length > 0) {\r\n            allProducts = allProducts.filter(product => {\r\n                if (!product.info || !Array.isArray(product.info)) return false;\r\n                \r\n                return Object.entries(filters.characteristics).every(([charTitle, charValues]) => {\r\n                    const productChar = product.info.find(info => info.title === charTitle);\r\n                    if (!productChar) return false;\r\n                    \r\n                    return charValues.includes(productChar.description);\r\n                });\r\n            });\r\n        }\r\n\r\n    // ФИЛЬТРАЦИЯ ПО ЦЕНЕ (исправленная логика)\r\nif (filters.minPrice) {\r\n    const minPrice = parseFloat(filters.minPrice);\r\n    allProducts = allProducts.filter(product => {\r\n        // Исключаем товары без цены или с ценой 0 при minPrice > 0\r\n        if (product.price === null || product.price === undefined || product.price === 0) {\r\n            return false; // Исключаем товары без цены\r\n        }\r\n        return product.price >= minPrice;\r\n    });\r\n}\r\n\r\nif (filters.maxPrice) {\r\n    const maxPrice = parseFloat(filters.maxPrice);\r\n    allProducts = allProducts.filter(product => {\r\n        // Для maxPrice включаем только товары с ценой\r\n        if (product.price === null || product.price === undefined || product.price === 0) {\r\n            return false; // Исключаем товары без цены\r\n        }\r\n        return product.price <= maxPrice;\r\n    });\r\n}\r\n\r\n        // СОРТИРОВКА\r\n        if (filters.sortBy) {\r\n            switch (filters.sortBy) {\r\n                case 'price_asc':\r\n                    allProducts.sort((a, b) => {\r\n                        const priceA = a.price || 0;\r\n                        const priceB = b.price || 0;\r\n                        return priceA - priceB;\r\n                    });\r\n                    break;\r\n                case 'price_desc':\r\n                    allProducts.sort((a, b) => {\r\n                        const priceA = a.price || 0;\r\n                        const priceB = b.price || 0;\r\n                        return priceB - priceA;\r\n                    });\r\n                    break;\r\n                case 'name_asc':\r\n                    allProducts.sort((a, b) => \r\n                        (a.name || '').localeCompare(b.name || '')\r\n                    );\r\n                    break;\r\n                case 'name_desc':\r\n                    allProducts.sort((a, b) => \r\n                        (b.name || '').localeCompare(a.name || '')\r\n                    );\r\n                    break;\r\n                case 'newest':\r\n                default:\r\n                    allProducts.sort((a, b) => \r\n                        new Date(b.createdAt || 0) - new Date(a.createdAt || 0)\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Пагинация на фронтенде\r\n        const startIndex = (this.page - 1) * this.limit;\r\n        const endIndex = startIndex + this.limit;\r\n        const paginatedProducts = allProducts.slice(startIndex, endIndex);\r\n\r\n        this.setProducts(paginatedProducts);\r\n        this.setTotalCount(allProducts.length);\r\n        \r\n    } catch (error) {\r\n        console.error('Ошибка при получении продуктов:', error);\r\n        this.setError('Не удалось загрузить товары');\r\n        this.setProducts([]);\r\n        this.setTotalCount(0);\r\n    } finally {\r\n        this.setLoading(false);\r\n    }\r\n}\r\n    // Получение продуктов по конкретному городу (для обратной совместимости)\r\n    async fetchProductsByCity(city) {\r\n        this.setSelectedCity(city);\r\n        this.setCurrentSearchQuery(''); // Сбрасываем поиск при смене города\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Поиск товаров - использует fetchProducts\r\n    async searchProducts(searchQuery) {\r\n        this.setCurrentSearchQuery(searchQuery);\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Смена города - использует fetchProducts\r\n    async changeCity(city) {\r\n        await this.fetchProductsByCity(city);\r\n    }\r\n\r\n    // Сброс поиска\r\n    async clearSearch() {\r\n        this.setCurrentSearchQuery('');\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Сброс всех фильтров\r\n    async resetFilters() {\r\n        this.setSelectedCity('');\r\n        this.setCurrentSearchQuery('');\r\n        sessionStorage.removeItem('city');\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Получение текущего города\r\n    get currentCity() {\r\n        return this.selectedCity || sessionStorage.getItem('city') || 'Выберите город';\r\n    }\r\n\r\n    // Есть ли выбранный город\r\n    get hasSelectedCity() {\r\n        return !!this.selectedCity;\r\n    }\r\n\r\n    // Есть ли активный поиск\r\n    get hasActiveSearch() {\r\n        return !!this.currentSearchQuery;\r\n    }\r\n}\r\n\r\n// Создаем экземпляр store\r\nexport const productStore = new ProductStore();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}