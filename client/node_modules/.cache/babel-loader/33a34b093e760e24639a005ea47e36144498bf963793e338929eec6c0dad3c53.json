{"ast":null,"code":"var _jsxFileName = \"D:\\\\nkurs\\\\client\\\\src\\\\components\\\\modals\\\\CitySelector.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport geo from '../../assets/geo.png';\nimport CitySelectorModal from '../../components/modals/CitySelector';\nimport { Context } from '../../index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityDisplay = () => {\n  _s();\n  const {\n    product\n  } = useContext(Context);\n  const [city, setCity] = useState('Выберите город');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [cities, setCities] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Получаем текущее местоположение пользователя\n  useEffect(() => {\n    const getCurrentLocation = () => {\n      if (navigator.geolocation) {\n        setIsLoading(true);\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          try {\n            // Пробуем определить город через наш бэкенд\n            const response = await fetch(`http://localhost:5000/api/products/geocode?lat=${latitude}&lng=${longitude}`);\n            if (response.ok) {\n              const data = await response.json();\n              const currentCity = data.city;\n              setCity(currentCity);\n              setSelectedCity(currentCity);\n              sessionStorage.setItem('city', currentCity);\n            }\n          } catch (error) {\n            console.error('Ошибка при определении города:', error);\n            // Fallback на внешний API\n            try {\n              const backupResponse = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=ru`);\n              const backupData = await backupResponse.json();\n              const currentCity = backupData.city || backupData.locality || 'Неизвестный город';\n              setCity(currentCity);\n              setSelectedCity(currentCity);\n              sessionStorage.setItem('city', currentCity);\n            } catch (backupError) {\n              console.error('Ошибка резервного определения города:', backupError);\n            }\n          }\n          setIsLoading(false);\n        }, error => {\n          console.error('Ошибка геолокации:', error);\n          setIsLoading(false);\n          // Если геолокация недоступна, используем сохраненный город\n          const savedCity = sessionStorage.getItem('city');\n          if (savedCity) {\n            setCity(savedCity);\n            setSelectedCity(savedCity);\n          }\n        });\n      } else {\n        console.log('Геолокация не поддерживается');\n        const savedCity = sessionStorage.getItem('city');\n        if (savedCity) {\n          setCity(savedCity);\n          setSelectedCity(savedCity);\n        }\n      }\n    };\n    getCurrentLocation();\n  }, []);\n\n  // Получаем список городов из базы данных\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/products/cities');\n        if (response.ok) {\n          const data = await response.json();\n          setCities(data);\n        }\n      } catch (error) {\n        console.error('Ошибка при получении городов:', error);\n      }\n    };\n    fetchCities();\n  }, []);\n  const handleCityChange = async e => {\n    const newCity = e.target.value;\n    setSelectedCity(newCity);\n    setCity(newCity);\n    sessionStorage.setItem('city', newCity);\n\n    // Загружаем товары для выбранного города\n    if (product && product.fetchProductsByCity) {\n      await product.fetchProductsByCity(newCity);\n    }\n  };\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '10px',\n      cursor: 'pointer'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: geo,\n      style: {\n        width: '24px',\n        height: '24px',\n        opacity: isLoading ? 0.6 : 1\n      },\n      alt: \"\\u0413\\u0435\\u043E\\u043B\\u043E\\u043A\\u0430\\u0446\\u0438\\u044F\",\n      onClick: handleOpenModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleOpenModal,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: '12px',\n          color: '#666',\n          display: 'block'\n        },\n        children: \"\\u0412\\u0430\\u0448 \\u0433\\u043E\\u0440\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: '14px',\n          fontWeight: 'bold'\n        },\n        children: isLoading ? 'Определяем...' : city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CitySelectorModal, {\n      show: showModal,\n      handleClose: handleCloseModal,\n      cities: cities,\n      selectedCity: selectedCity,\n      handleCityChange: handleCityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_s(CityDisplay, \"qLeHEDhrdcaBcP35o/RNPpcKcJg=\");\n_c = CityDisplay;\nexport default CityDisplay;\nvar _c;\n$RefreshReg$(_c, \"CityDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useContext","geo","CitySelectorModal","Context","jsxDEV","_jsxDEV","CityDisplay","_s","product","city","setCity","selectedCity","setSelectedCity","showModal","setShowModal","cities","setCities","isLoading","setIsLoading","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","response","fetch","ok","data","json","currentCity","sessionStorage","setItem","error","console","backupResponse","backupData","locality","backupError","savedCity","getItem","log","fetchCities","handleCityChange","e","newCity","target","value","fetchProductsByCity","handleOpenModal","handleCloseModal","style","display","alignItems","gap","cursor","children","src","width","height","opacity","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","color","fontWeight","show","handleClose","_c","$RefreshReg$"],"sources":["D:/nkurs/client/src/components/modals/CitySelector.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport geo from '../../assets/geo.png'; \r\nimport CitySelectorModal from '../../components/modals/CitySelector';\r\nimport { Context } from '../../index';\r\n\r\nconst CityDisplay = () => {\r\n    const { product } = useContext(Context);\r\n    const [city, setCity] = useState('Выберите город'); \r\n    const [selectedCity, setSelectedCity] = useState('');\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [cities, setCities] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Получаем текущее местоположение пользователя\r\n    useEffect(() => {\r\n        const getCurrentLocation = () => {\r\n            if (navigator.geolocation) {\r\n                setIsLoading(true);\r\n                navigator.geolocation.getCurrentPosition(\r\n                    async (position) => {\r\n                        const { latitude, longitude } = position.coords;\r\n                        \r\n                        try {\r\n                            // Пробуем определить город через наш бэкенд\r\n                            const response = await fetch(`http://localhost:5000/api/products/geocode?lat=${latitude}&lng=${longitude}`);\r\n                            if (response.ok) {\r\n                                const data = await response.json();\r\n                                const currentCity = data.city;\r\n                                setCity(currentCity);\r\n                                setSelectedCity(currentCity);\r\n                                sessionStorage.setItem('city', currentCity);\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Ошибка при определении города:', error);\r\n                            // Fallback на внешний API\r\n                            try {\r\n                                const backupResponse = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=ru`);\r\n                                const backupData = await backupResponse.json();\r\n                                const currentCity = backupData.city || backupData.locality || 'Неизвестный город';\r\n                                setCity(currentCity);\r\n                                setSelectedCity(currentCity);\r\n                                sessionStorage.setItem('city', currentCity);\r\n                            } catch (backupError) {\r\n                                console.error('Ошибка резервного определения города:', backupError);\r\n                            }\r\n                        }\r\n                        setIsLoading(false);\r\n                    },\r\n                    (error) => {\r\n                        console.error('Ошибка геолокации:', error);\r\n                        setIsLoading(false);\r\n                        // Если геолокация недоступна, используем сохраненный город\r\n                        const savedCity = sessionStorage.getItem('city');\r\n                        if (savedCity) {\r\n                            setCity(savedCity);\r\n                            setSelectedCity(savedCity);\r\n                        }\r\n                    }\r\n                );\r\n            } else {\r\n                console.log('Геолокация не поддерживается');\r\n                const savedCity = sessionStorage.getItem('city');\r\n                if (savedCity) {\r\n                    setCity(savedCity);\r\n                    setSelectedCity(savedCity);\r\n                }\r\n            }\r\n        };\r\n\r\n        getCurrentLocation();\r\n    }, []);\r\n\r\n    // Получаем список городов из базы данных\r\n    useEffect(() => {\r\n        const fetchCities = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/products/cities');\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setCities(data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка при получении городов:', error);\r\n            }\r\n        };\r\n\r\n        fetchCities();\r\n    }, []);\r\n\r\n    const handleCityChange = async (e) => {\r\n        const newCity = e.target.value;\r\n        setSelectedCity(newCity);\r\n        setCity(newCity);\r\n        sessionStorage.setItem('city', newCity);\r\n\r\n        // Загружаем товары для выбранного города\r\n        if (product && product.fetchProductsByCity) {\r\n            await product.fetchProductsByCity(newCity);\r\n        }\r\n    };\r\n\r\n    const handleOpenModal = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', cursor: 'pointer' }}>\r\n            <img \r\n                src={geo} \r\n                style={{ \r\n                    width: '24px', \r\n                    height: '24px', \r\n                    opacity: isLoading ? 0.6 : 1\r\n                }} \r\n                alt=\"Геолокация\" \r\n                onClick={handleOpenModal}\r\n            />\r\n            <div onClick={handleOpenModal}>\r\n                <span style={{ fontSize: '12px', color: '#666', display: 'block' }}>Ваш город</span>\r\n                <span style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                    {isLoading ? 'Определяем...' : city}\r\n                </span>\r\n            </div>\r\n            \r\n            <CitySelectorModal \r\n                show={showModal} \r\n                handleClose={handleCloseModal}\r\n                cities={cities}\r\n                selectedCity={selectedCity}\r\n                handleCityChange={handleCityChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}