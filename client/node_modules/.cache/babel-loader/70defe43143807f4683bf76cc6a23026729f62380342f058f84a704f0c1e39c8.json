{"ast":null,"code":"// store/ProductStore.js\nimport { makeAutoObservable } from 'mobx';\nclass ProductStore {\n  // Добавляем хранение текущих фильтров\n\n  constructor() {\n    this.products = [];\n    this.totalCount = 0;\n    this.limit = 9;\n    this.page = 1;\n    this.selectedCity = '';\n    this.isLoading = false;\n    this.error = null;\n    this.cities = [];\n    this.currentSearchQuery = '';\n    this.currentFilters = null;\n    makeAutoObservable(this);\n    this.initializeCity();\n    this.initializeFilters();\n  }\n\n  // Инициализация города при загрузке store\n  initializeCity() {\n    const savedCity = sessionStorage.getItem('city');\n    if (savedCity) {\n      this.selectedCity = savedCity;\n    }\n  }\n\n  // Инициализация фильтров из sessionStorage\n  initializeFilters() {\n    const savedFilters = sessionStorage.getItem('productFilters');\n    if (savedFilters) {\n      try {\n        this.currentFilters = JSON.parse(savedFilters);\n      } catch (error) {\n        console.error('Ошибка при загрузке фильтров:', error);\n        this.currentFilters = null;\n      }\n    }\n  }\n  setProducts(products) {\n    this.products = products;\n  }\n  setTotalCount(count) {\n    this.totalCount = count;\n  }\n  setPage(page) {\n    this.page = page;\n  }\n  setSelectedCity(city) {\n    this.selectedCity = city;\n    sessionStorage.setItem('city', city);\n  }\n  setLoading(loading) {\n    this.isLoading = loading;\n  }\n  setError(error) {\n    this.error = error;\n  }\n  setCities(cities) {\n    this.cities = cities;\n  }\n  setCurrentSearchQuery(query) {\n    this.currentSearchQuery = query;\n  }\n\n  // Сохранение текущих фильтров\n  setCurrentFilters(filters) {\n    this.currentFilters = filters;\n    // Сохраняем в sessionStorage для восстановления при перезагрузке\n    try {\n      sessionStorage.setItem('productFilters', JSON.stringify(filters));\n    } catch (error) {\n      console.error('Ошибка при сохранении фильтров:', error);\n    }\n  }\n\n  // Получение текущих фильтров\n  getCurrentFilters() {\n    return this.currentFilters;\n  }\n\n  // Очистка фильтров\n  clearCurrentFilters() {\n    this.currentFilters = null;\n    sessionStorage.removeItem('productFilters');\n  }\n\n  // Получение списка городов из БД\n  async fetchCities() {\n    try {\n      const response = await fetch('http://localhost:5000/api/prod/cities');\n      if (response.ok) {\n        const data = await response.json();\n        this.setCities(data);\n        return data;\n      }\n    } catch (error) {\n      console.error('Ошибка при получении городов:', error);\n    }\n    return [];\n  }\n  async fetchProducts(filters = {}) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      let url = `http://localhost:5000/api/prod?limit=1000`;\n      const queryParams = new URLSearchParams();\n      if (this.selectedCity) {\n        queryParams.append('city', this.selectedCity);\n      }\n      if (filters.typeId) {\n        queryParams.append('typeId', filters.typeId);\n      }\n      if (filters.sellerId) {\n        queryParams.append('sellerId', filters.sellerId);\n      }\n      const queryString = queryParams.toString();\n      if (queryString) {\n        url += `&${queryString}`;\n      }\n      console.log('Fetch URL:', url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      let allProducts = data.rows || data;\n\n      // ПОИСК НА ФРОНТЕНДЕ\n      if (this.currentSearchQuery) {\n        const searchTerm = this.currentSearchQuery.toLowerCase().trim();\n        allProducts = allProducts.filter(product => product.name.toLowerCase().includes(searchTerm) || product.description && product.description.toLowerCase().includes(searchTerm) || product.price_text && product.price_text.toLowerCase().includes(searchTerm));\n      }\n\n      // ФИЛЬТРАЦИЯ ПО КАТЕГОРИИ\n      if (filters.categoryId) {\n        allProducts = allProducts.filter(product => product.type_id == filters.categoryId);\n      }\n\n      // ФИЛЬТРАЦИЯ ПО ХАРАКТЕРИСТИКАМ\n      if (filters.characteristics && Object.keys(filters.characteristics).length > 0) {\n        allProducts = allProducts.filter(product => {\n          if (!product.info || !Array.isArray(product.info)) return false;\n          return Object.entries(filters.characteristics).every(([charTitle, charValues]) => {\n            const productChar = product.info.find(info => info.title === charTitle);\n            if (!productChar) return false;\n            return charValues.includes(productChar.description);\n          });\n        });\n      }\n\n      // ФИЛЬТРАЦИЯ ПО ЦЕНЕ (исправленная логика)\n      if (filters.minPrice) {\n        const minPrice = parseFloat(filters.minPrice);\n        allProducts = allProducts.filter(product => {\n          if (product.price === null || product.price === undefined || product.price === 0) {\n            return !filters.excludeNoPrice; // Если excludeNoPrice=true, исключаем\n          }\n          return product.price >= minPrice;\n        });\n      }\n      if (filters.maxPrice) {\n        const maxPrice = parseFloat(filters.maxPrice);\n        allProducts = allProducts.filter(product => {\n          if (product.price === null || product.price === undefined || product.price === 0) {\n            return !filters.excludeNoPrice; // Если excludeNoPrice=true, исключаем\n          }\n          return product.price <= maxPrice;\n        });\n      }\n      if (filters.excludeNoPrice && !filters.minPrice && !filters.maxPrice) {\n        allProducts = allProducts.filter(product => product.price !== null && product.price !== undefined && product.price > 0);\n      }\n\n      // СОРТИРОВКА\n      if (filters.sortBy) {\n        switch (filters.sortBy) {\n          case 'price_asc':\n            allProducts.sort((a, b) => {\n              const priceA = a.price || 0;\n              const priceB = b.price || 0;\n              return priceA - priceB;\n            });\n            break;\n          case 'price_desc':\n            allProducts.sort((a, b) => {\n              const priceA = a.price || 0;\n              const priceB = b.price || 0;\n              return priceB - priceA;\n            });\n            break;\n          case 'name_asc':\n            allProducts.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n            break;\n          case 'name_desc':\n            allProducts.sort((a, b) => (b.name || '').localeCompare(a.name || ''));\n            break;\n          case 'newest':\n          default:\n            allProducts.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));\n            break;\n        }\n      }\n\n      // Пагинация на фронтенде\n      const startIndex = (this.page - 1) * this.limit;\n      const endIndex = startIndex + this.limit;\n      const paginatedProducts = allProducts.slice(startIndex, endIndex);\n      this.setProducts(paginatedProducts);\n      this.setTotalCount(allProducts.length);\n    } catch (error) {\n      console.error('Ошибка при получении продуктов:', error);\n      this.setError('Не удалось загрузить товары');\n      this.setProducts([]);\n      this.setTotalCount(0);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Получение продуктов по конкретному городу (для обратной совместимости)\n  async fetchProductsByCity(city) {\n    this.setSelectedCity(city);\n    this.setCurrentSearchQuery(''); // Сбрасываем поиск при смене города\n    await this.fetchProducts();\n  }\n\n  // Поиск товаров - использует fetchProducts\n  async searchProducts(searchQuery, filters = {}) {\n    this.setCurrentSearchQuery(searchQuery);\n\n    // Объединяем с текущими фильтрами если они есть\n    const finalFilters = {\n      ...this.currentFilters,\n      ...filters\n    };\n    if (Object.keys(finalFilters).length > 0) {\n      this.setCurrentFilters(finalFilters);\n    }\n    await this.fetchProducts(finalFilters);\n  }\n\n  // Смена города - использует fetchProducts\n  async changeCity(city) {\n    await this.fetchProductsByCity(city);\n  }\n\n  // Сброс поиска\n  async clearSearch() {\n    this.setCurrentSearchQuery('');\n    await this.fetchProducts(this.currentFilters || {});\n  }\n\n  // Сброс всех фильтров\n  async resetFilters() {\n    this.setSelectedCity('');\n    this.setCurrentSearchQuery('');\n    this.clearCurrentFilters();\n    sessionStorage.removeItem('city');\n    await this.fetchProducts();\n  }\n\n  // Применение фильтров\n  async applyFilters(filters) {\n    this.setCurrentFilters(filters);\n    await this.fetchProducts(filters);\n  }\n\n  // Получение текущего города\n  get currentCity() {\n    return this.selectedCity || sessionStorage.getItem('city') || 'Выберите город';\n  }\n\n  // Есть ли выбранный город\n  get hasSelectedCity() {\n    return !!this.selectedCity;\n  }\n\n  // Есть ли активный поиск\n  get hasActiveSearch() {\n    return !!this.currentSearchQuery;\n  }\n\n  // Есть ли активные фильтры\n  get hasActiveFilters() {\n    return this.currentFilters && (this.currentFilters.minPrice || this.currentFilters.maxPrice || this.currentFilters.sortBy !== 'newest' || this.currentFilters.categoryId || this.currentFilters.characteristics && Object.keys(this.currentFilters.characteristics).length > 0 || this.currentFilters.excludeNoPrice);\n  }\n}\n\n// Создаем экземпляр store\nexport const productStore = new ProductStore();","map":{"version":3,"names":["makeAutoObservable","ProductStore","constructor","products","totalCount","limit","page","selectedCity","isLoading","error","cities","currentSearchQuery","currentFilters","initializeCity","initializeFilters","savedCity","sessionStorage","getItem","savedFilters","JSON","parse","console","setProducts","setTotalCount","count","setPage","setSelectedCity","city","setItem","setLoading","loading","setError","setCities","setCurrentSearchQuery","query","setCurrentFilters","filters","stringify","getCurrentFilters","clearCurrentFilters","removeItem","fetchCities","response","fetch","ok","data","json","fetchProducts","url","queryParams","URLSearchParams","append","typeId","sellerId","queryString","toString","log","Error","status","allProducts","rows","searchTerm","toLowerCase","trim","filter","product","name","includes","description","price_text","categoryId","type_id","characteristics","Object","keys","length","info","Array","isArray","entries","every","charTitle","charValues","productChar","find","title","minPrice","parseFloat","price","undefined","excludeNoPrice","maxPrice","sortBy","sort","a","b","priceA","priceB","localeCompare","Date","createdAt","startIndex","endIndex","paginatedProducts","slice","fetchProductsByCity","searchProducts","searchQuery","finalFilters","changeCity","clearSearch","resetFilters","applyFilters","currentCity","hasSelectedCity","hasActiveSearch","hasActiveFilters","productStore"],"sources":["D:/nkurs/client/src/store/ProductStore.js"],"sourcesContent":["// store/ProductStore.js\r\nimport { makeAutoObservable } from 'mobx';\r\n\r\nclass ProductStore {\r\n    products = [];\r\n    totalCount = 0;\r\n    limit = 9;\r\n    page = 1;\r\n    selectedCity = '';\r\n    isLoading = false;\r\n    error = null;\r\n    cities = [];\r\n    currentSearchQuery = '';\r\n    currentFilters = null; // Добавляем хранение текущих фильтров\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.initializeCity();\r\n        this.initializeFilters();\r\n    }\r\n\r\n    // Инициализация города при загрузке store\r\n    initializeCity() {\r\n        const savedCity = sessionStorage.getItem('city');\r\n        if (savedCity) {\r\n            this.selectedCity = savedCity;\r\n        }\r\n    }\r\n\r\n    // Инициализация фильтров из sessionStorage\r\n    initializeFilters() {\r\n        const savedFilters = sessionStorage.getItem('productFilters');\r\n        if (savedFilters) {\r\n            try {\r\n                this.currentFilters = JSON.parse(savedFilters);\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке фильтров:', error);\r\n                this.currentFilters = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    setProducts(products) {\r\n        this.products = products;\r\n    }\r\n\r\n    setTotalCount(count) {\r\n        this.totalCount = count;\r\n    }\r\n\r\n    setPage(page) {\r\n        this.page = page;\r\n    }\r\n\r\n    setSelectedCity(city) {\r\n        this.selectedCity = city;\r\n        sessionStorage.setItem('city', city);\r\n    }\r\n\r\n    setLoading(loading) {\r\n        this.isLoading = loading;\r\n    }\r\n\r\n    setError(error) {\r\n        this.error = error;\r\n    }\r\n\r\n    setCities(cities) {\r\n        this.cities = cities;\r\n    }\r\n\r\n    setCurrentSearchQuery(query) {\r\n        this.currentSearchQuery = query;\r\n    }\r\n\r\n    // Сохранение текущих фильтров\r\n    setCurrentFilters(filters) {\r\n        this.currentFilters = filters;\r\n        // Сохраняем в sessionStorage для восстановления при перезагрузке\r\n        try {\r\n            sessionStorage.setItem('productFilters', JSON.stringify(filters));\r\n        } catch (error) {\r\n            console.error('Ошибка при сохранении фильтров:', error);\r\n        }\r\n    }\r\n\r\n    // Получение текущих фильтров\r\n    getCurrentFilters() {\r\n        return this.currentFilters;\r\n    }\r\n\r\n    // Очистка фильтров\r\n    clearCurrentFilters() {\r\n        this.currentFilters = null;\r\n        sessionStorage.removeItem('productFilters');\r\n    }\r\n\r\n    // Получение списка городов из БД\r\n    async fetchCities() {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/prod/cities');\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                this.setCities(data);\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при получении городов:', error);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    async fetchProducts(filters = {}) {\r\n        this.setLoading(true);\r\n        this.setError(null);\r\n        \r\n        try {\r\n            let url = `http://localhost:5000/api/prod?limit=1000`;\r\n            \r\n            const queryParams = new URLSearchParams();\r\n            \r\n            if (this.selectedCity) {\r\n                queryParams.append('city', this.selectedCity);\r\n            }\r\n            \r\n            if (filters.typeId) {\r\n                queryParams.append('typeId', filters.typeId);\r\n            }\r\n            if (filters.sellerId) {\r\n                queryParams.append('sellerId', filters.sellerId);\r\n            }\r\n            \r\n            const queryString = queryParams.toString();\r\n            if (queryString) {\r\n                url += `&${queryString}`;\r\n            }\r\n\r\n            console.log('Fetch URL:', url);\r\n\r\n            const response = await fetch(url);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            let allProducts = data.rows || data;\r\n\r\n            // ПОИСК НА ФРОНТЕНДЕ\r\n            if (this.currentSearchQuery) {\r\n                const searchTerm = this.currentSearchQuery.toLowerCase().trim();\r\n                allProducts = allProducts.filter(product => \r\n                    product.name.toLowerCase().includes(searchTerm) ||\r\n                    (product.description && product.description.toLowerCase().includes(searchTerm)) ||\r\n                    (product.price_text && product.price_text.toLowerCase().includes(searchTerm))\r\n                );\r\n            }\r\n\r\n            // ФИЛЬТРАЦИЯ ПО КАТЕГОРИИ\r\n            if (filters.categoryId) {\r\n                allProducts = allProducts.filter(product => \r\n                    product.type_id == filters.categoryId\r\n                );\r\n            }\r\n\r\n            // ФИЛЬТРАЦИЯ ПО ХАРАКТЕРИСТИКАМ\r\n            if (filters.characteristics && Object.keys(filters.characteristics).length > 0) {\r\n                allProducts = allProducts.filter(product => {\r\n                    if (!product.info || !Array.isArray(product.info)) return false;\r\n                    \r\n                    return Object.entries(filters.characteristics).every(([charTitle, charValues]) => {\r\n                        const productChar = product.info.find(info => info.title === charTitle);\r\n                        if (!productChar) return false;\r\n                        \r\n                        return charValues.includes(productChar.description);\r\n                    });\r\n                });\r\n            }\r\n\r\n            // ФИЛЬТРАЦИЯ ПО ЦЕНЕ (исправленная логика)\r\n            if (filters.minPrice) {\r\n                const minPrice = parseFloat(filters.minPrice);\r\n                allProducts = allProducts.filter(product => {\r\n                    if (product.price === null || product.price === undefined || product.price === 0) {\r\n                        return !filters.excludeNoPrice; // Если excludeNoPrice=true, исключаем\r\n                    }\r\n                    return product.price >= minPrice;\r\n                });\r\n            }\r\n\r\n            if (filters.maxPrice) {\r\n                const maxPrice = parseFloat(filters.maxPrice);\r\n                allProducts = allProducts.filter(product => {\r\n                    if (product.price === null || product.price === undefined || product.price === 0) {\r\n                        return !filters.excludeNoPrice; // Если excludeNoPrice=true, исключаем\r\n                    }\r\n                    return product.price <= maxPrice;\r\n                });\r\n            }\r\n\r\n            if (filters.excludeNoPrice && !filters.minPrice && !filters.maxPrice) {\r\n                allProducts = allProducts.filter(product => \r\n                    product.price !== null && \r\n                    product.price !== undefined && \r\n                    product.price > 0\r\n                );\r\n            }\r\n\r\n            // СОРТИРОВКА\r\n            if (filters.sortBy) {\r\n                switch (filters.sortBy) {\r\n                    case 'price_asc':\r\n                        allProducts.sort((a, b) => {\r\n                            const priceA = a.price || 0;\r\n                            const priceB = b.price || 0;\r\n                            return priceA - priceB;\r\n                        });\r\n                        break;\r\n                    case 'price_desc':\r\n                        allProducts.sort((a, b) => {\r\n                            const priceA = a.price || 0;\r\n                            const priceB = b.price || 0;\r\n                            return priceB - priceA;\r\n                        });\r\n                        break;\r\n                    case 'name_asc':\r\n                        allProducts.sort((a, b) => \r\n                            (a.name || '').localeCompare(b.name || '')\r\n                        );\r\n                        break;\r\n                    case 'name_desc':\r\n                        allProducts.sort((a, b) => \r\n                            (b.name || '').localeCompare(a.name || '')\r\n                        );\r\n                        break;\r\n                    case 'newest':\r\n                    default:\r\n                        allProducts.sort((a, b) => \r\n                            new Date(b.createdAt || 0) - new Date(a.createdAt || 0)\r\n                        );\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // Пагинация на фронтенде\r\n            const startIndex = (this.page - 1) * this.limit;\r\n            const endIndex = startIndex + this.limit;\r\n            const paginatedProducts = allProducts.slice(startIndex, endIndex);\r\n\r\n            this.setProducts(paginatedProducts);\r\n            this.setTotalCount(allProducts.length);\r\n            \r\n        } catch (error) {\r\n            console.error('Ошибка при получении продуктов:', error);\r\n            this.setError('Не удалось загрузить товары');\r\n            this.setProducts([]);\r\n            this.setTotalCount(0);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Получение продуктов по конкретному городу (для обратной совместимости)\r\n    async fetchProductsByCity(city) {\r\n        this.setSelectedCity(city);\r\n        this.setCurrentSearchQuery(''); // Сбрасываем поиск при смене города\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Поиск товаров - использует fetchProducts\r\n    async searchProducts(searchQuery, filters = {}) {\r\n        this.setCurrentSearchQuery(searchQuery);\r\n        \r\n        // Объединяем с текущими фильтрами если они есть\r\n        const finalFilters = { ...this.currentFilters, ...filters };\r\n        if (Object.keys(finalFilters).length > 0) {\r\n            this.setCurrentFilters(finalFilters);\r\n        }\r\n        \r\n        await this.fetchProducts(finalFilters);\r\n    }\r\n\r\n    // Смена города - использует fetchProducts\r\n    async changeCity(city) {\r\n        await this.fetchProductsByCity(city);\r\n    }\r\n\r\n    // Сброс поиска\r\n    async clearSearch() {\r\n        this.setCurrentSearchQuery('');\r\n        await this.fetchProducts(this.currentFilters || {});\r\n    }\r\n\r\n    // Сброс всех фильтров\r\n    async resetFilters() {\r\n        this.setSelectedCity('');\r\n        this.setCurrentSearchQuery('');\r\n        this.clearCurrentFilters();\r\n        sessionStorage.removeItem('city');\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Применение фильтров\r\n    async applyFilters(filters) {\r\n        this.setCurrentFilters(filters);\r\n        await this.fetchProducts(filters);\r\n    }\r\n\r\n    // Получение текущего города\r\n    get currentCity() {\r\n        return this.selectedCity || sessionStorage.getItem('city') || 'Выберите город';\r\n    }\r\n\r\n    // Есть ли выбранный город\r\n    get hasSelectedCity() {\r\n        return !!this.selectedCity;\r\n    }\r\n\r\n    // Есть ли активный поиск\r\n    get hasActiveSearch() {\r\n        return !!this.currentSearchQuery;\r\n    }\r\n\r\n    // Есть ли активные фильтры\r\n    get hasActiveFilters() {\r\n        return this.currentFilters && (\r\n            this.currentFilters.minPrice || \r\n            this.currentFilters.maxPrice || \r\n            this.currentFilters.sortBy !== 'newest' || \r\n            this.currentFilters.categoryId || \r\n            (this.currentFilters.characteristics && Object.keys(this.currentFilters.characteristics).length > 0) || \r\n            this.currentFilters.excludeNoPrice\r\n        );\r\n    }\r\n}\r\n\r\n// Создаем экземпляр store\r\nexport const productStore = new ProductStore();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}