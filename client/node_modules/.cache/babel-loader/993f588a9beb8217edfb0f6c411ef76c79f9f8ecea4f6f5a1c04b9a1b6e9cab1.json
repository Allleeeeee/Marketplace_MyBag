{"ast":null,"code":"var _jsxFileName = \"D:\\\\nkurs\\\\client\\\\src\\\\components\\\\CityDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport geo from '../assets/geo.png';\nimport CitySelectorModal from '../components/modals/CitySelector';\nimport { Context } from '../index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityDisplay = () => {\n  _s();\n  const {\n    product\n  } = useContext(Context);\n  const [city, setCity] = useState('Определяем город...');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [cities, setCities] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Получаем список городов из базы данных\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/products/cities');\n        if (response.ok) {\n          const data = await response.json();\n          setCities(data);\n\n          // Если есть сохраненный город, устанавливаем его\n          const savedCity = sessionStorage.getItem('city');\n          if (savedCity && data.includes(savedCity)) {\n            setCity(savedCity);\n            setSelectedCity(savedCity);\n            await loadProductsForCity(savedCity);\n          } else if (data.length > 0) {\n            // Иначе используем первый город из списка\n            setCity(data[0]);\n            setSelectedCity(data[0]);\n            await loadProductsForCity(data[0]);\n          }\n        }\n      } catch (error) {\n        console.error('Ошибка при получении городов:', error);\n      }\n    };\n    fetchCities();\n  }, []);\n\n  // Функция загрузки товаров для города\n  const loadProductsForCity = async cityName => {\n    if (product && product.fetchProductsByCity) {\n      await product.fetchProductsByCity(cityName);\n    }\n  };\n\n  // Получаем текущее местоположение пользователя\n  const getCurrentLocation = async () => {\n    if (navigator.geolocation) {\n      setIsLoading(true);\n      navigator.geolocation.getCurrentPosition(async position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        try {\n          // Используем наш бэкенд для геокодирования\n          const response = await fetch(`http://localhost:5000/api/products/geocode?lat=${latitude}&lng=${longitude}`);\n          if (response.ok) {\n            const data = await response.json();\n            const currentCity = data.city;\n            if (cities.includes(currentCity)) {\n              setCity(currentCity);\n              setSelectedCity(currentCity);\n              sessionStorage.setItem('city', currentCity);\n              await loadProductsForCity(currentCity);\n            }\n          }\n        } catch (error) {\n          console.error('Ошибка при определении города:', error);\n          fallbackGeolocation();\n        }\n        setIsLoading(false);\n      }, async error => {\n        console.error('Ошибка геолокации:', error);\n        fallbackGeolocation();\n        setIsLoading(false);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      });\n    } else {\n      console.log('Геолокация не поддерживается');\n      fallbackGeolocation();\n    }\n  };\n  const fallbackGeolocation = async () => {\n    const savedCity = sessionStorage.getItem('city');\n    if (savedCity && cities.includes(savedCity)) {\n      setCity(savedCity);\n      setSelectedCity(savedCity);\n      await loadProductsForCity(savedCity);\n    } else if (cities.length > 0) {\n      setCity(cities[0]);\n      setSelectedCity(cities[0]);\n      await loadProductsForCity(cities[0]);\n    }\n  };\n  const handleCityChange = async e => {\n    const newCity = e.target.value;\n    setSelectedCity(newCity);\n    setCity(newCity);\n    sessionStorage.setItem('city', newCity);\n    await loadProductsForCity(newCity);\n  };\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  const handleDetectLocation = () => {\n    getCurrentLocation();\n    handleCloseModal();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '10px',\n      cursor: 'pointer'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: geo,\n      style: {\n        width: '24px',\n        height: '24px',\n        opacity: isLoading ? 0.6 : 1\n      },\n      alt: \"\\u0413\\u0435\\u043E\\u043B\\u043E\\u043A\\u0430\\u0446\\u0438\\u044F\",\n      onClick: handleOpenModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleOpenModal,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: '12px',\n          color: '#666',\n          display: 'block'\n        },\n        children: \"\\u0412\\u0430\\u0448 \\u0433\\u043E\\u0440\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: '14px',\n          fontWeight: 'bold'\n        },\n        children: isLoading ? 'Определяем...' : city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CitySelectorModal, {\n      show: showModal,\n      handleClose: handleCloseModal,\n      cities: cities,\n      selectedCity: selectedCity,\n      handleCityChange: handleCityChange,\n      onDetectLocation: handleDetectLocation,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(CityDisplay, \"5T6hMmkyFqOrgiyDuWUt8DmcTf8=\");\n_c = CityDisplay;\nexport default CityDisplay;\nvar _c;\n$RefreshReg$(_c, \"CityDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useContext","geo","CitySelectorModal","Context","jsxDEV","_jsxDEV","CityDisplay","_s","product","city","setCity","selectedCity","setSelectedCity","showModal","setShowModal","cities","setCities","isLoading","setIsLoading","fetchCities","response","fetch","ok","data","json","savedCity","sessionStorage","getItem","includes","loadProductsForCity","length","error","console","cityName","fetchProductsByCity","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","currentCity","setItem","fallbackGeolocation","enableHighAccuracy","timeout","maximumAge","log","handleCityChange","e","newCity","target","value","handleOpenModal","handleCloseModal","handleDetectLocation","style","display","alignItems","gap","cursor","children","src","width","height","opacity","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","color","fontWeight","show","handleClose","onDetectLocation","_c","$RefreshReg$"],"sources":["D:/nkurs/client/src/components/CityDisplay.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport geo from '../assets/geo.png'; \r\nimport CitySelectorModal from '../components/modals/CitySelector';\r\nimport { Context } from '../index';\r\n\r\nconst CityDisplay = () => {\r\n    const { product } = useContext(Context);\r\n    const [city, setCity] = useState('Определяем город...'); \r\n    const [selectedCity, setSelectedCity] = useState('');\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [cities, setCities] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Получаем список городов из базы данных\r\n    useEffect(() => {\r\n        const fetchCities = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/products/cities');\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setCities(data);\r\n                    \r\n                    // Если есть сохраненный город, устанавливаем его\r\n                    const savedCity = sessionStorage.getItem('city');\r\n                    if (savedCity && data.includes(savedCity)) {\r\n                        setCity(savedCity);\r\n                        setSelectedCity(savedCity);\r\n                        await loadProductsForCity(savedCity);\r\n                    } else if (data.length > 0) {\r\n                        // Иначе используем первый город из списка\r\n                        setCity(data[0]);\r\n                        setSelectedCity(data[0]);\r\n                        await loadProductsForCity(data[0]);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка при получении городов:', error);\r\n            }\r\n        };\r\n\r\n        fetchCities();\r\n    }, []);\r\n\r\n    // Функция загрузки товаров для города\r\n    const loadProductsForCity = async (cityName) => {\r\n        if (product && product.fetchProductsByCity) {\r\n            await product.fetchProductsByCity(cityName);\r\n        }\r\n    };\r\n\r\n    // Получаем текущее местоположение пользователя\r\n    const getCurrentLocation = async () => {\r\n        if (navigator.geolocation) {\r\n            setIsLoading(true);\r\n            navigator.geolocation.getCurrentPosition(\r\n                async (position) => {\r\n                    const { latitude, longitude } = position.coords;\r\n                    \r\n                    try {\r\n                        // Используем наш бэкенд для геокодирования\r\n                        const response = await fetch(\r\n                            `http://localhost:5000/api/products/geocode?lat=${latitude}&lng=${longitude}`\r\n                        );\r\n                        if (response.ok) {\r\n                            const data = await response.json();\r\n                            const currentCity = data.city;\r\n                            \r\n                            if (cities.includes(currentCity)) {\r\n                                setCity(currentCity);\r\n                                setSelectedCity(currentCity);\r\n                                sessionStorage.setItem('city', currentCity);\r\n                                await loadProductsForCity(currentCity);\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        console.error('Ошибка при определении города:', error);\r\n                        fallbackGeolocation();\r\n                    }\r\n                    setIsLoading(false);\r\n                },\r\n                async (error) => {\r\n                    console.error('Ошибка геолокации:', error);\r\n                    fallbackGeolocation();\r\n                    setIsLoading(false);\r\n                },\r\n                {\r\n                    enableHighAccuracy: true,\r\n                    timeout: 10000,\r\n                    maximumAge: 60000\r\n                }\r\n            );\r\n        } else {\r\n            console.log('Геолокация не поддерживается');\r\n            fallbackGeolocation();\r\n        }\r\n    };\r\n\r\n    const fallbackGeolocation = async () => {\r\n        const savedCity = sessionStorage.getItem('city');\r\n        if (savedCity && cities.includes(savedCity)) {\r\n            setCity(savedCity);\r\n            setSelectedCity(savedCity);\r\n            await loadProductsForCity(savedCity);\r\n        } else if (cities.length > 0) {\r\n            setCity(cities[0]);\r\n            setSelectedCity(cities[0]);\r\n            await loadProductsForCity(cities[0]);\r\n        }\r\n    };\r\n\r\n    const handleCityChange = async (e) => {\r\n        const newCity = e.target.value;\r\n        setSelectedCity(newCity);\r\n        setCity(newCity);\r\n        sessionStorage.setItem('city', newCity);\r\n        await loadProductsForCity(newCity);\r\n    };\r\n\r\n    const handleOpenModal = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n    };\r\n\r\n    const handleDetectLocation = () => {\r\n        getCurrentLocation();\r\n        handleCloseModal();\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', cursor: 'pointer' }}>\r\n            <img \r\n                src={geo} \r\n                style={{ \r\n                    width: '24px', \r\n                    height: '24px', \r\n                    opacity: isLoading ? 0.6 : 1\r\n                }} \r\n                alt=\"Геолокация\" \r\n                onClick={handleOpenModal}\r\n            />\r\n            <div onClick={handleOpenModal}>\r\n                <span style={{ fontSize: '12px', color: '#666', display: 'block' }}>Ваш город</span>\r\n                <span style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                    {isLoading ? 'Определяем...' : city}\r\n                </span>\r\n            </div>\r\n            \r\n            <CitySelectorModal \r\n                show={showModal} \r\n                handleClose={handleCloseModal}\r\n                cities={cities}\r\n                selectedCity={selectedCity}\r\n                handleCityChange={handleCityChange}\r\n                onDetectLocation={handleDetectLocation}\r\n                isLoading={isLoading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}