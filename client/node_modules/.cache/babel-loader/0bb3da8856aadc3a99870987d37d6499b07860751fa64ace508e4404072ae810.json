{"ast":null,"code":"// store/ProductStore.js\nimport { makeAutoObservable } from 'mobx';\nclass ProductStore {\n  constructor() {\n    this.products = [];\n    this.totalCount = 0;\n    this.limit = 9;\n    this.page = 1;\n    this.selectedCity = '';\n    this.isLoading = false;\n    this.error = null;\n    this.cities = [];\n    makeAutoObservable(this);\n    this.initializeCity();\n  }\n\n  // Инициализация города при загрузке store\n  initializeCity() {\n    const savedCity = sessionStorage.getItem('city');\n    if (savedCity) {\n      this.selectedCity = savedCity;\n    }\n  }\n  setProducts(products) {\n    this.products = products;\n  }\n  setTotalCount(count) {\n    this.totalCount = count;\n  }\n  setPage(page) {\n    this.page = page;\n  }\n  setSelectedCity(city) {\n    this.selectedCity = city;\n    sessionStorage.setItem('city', city);\n  }\n  setLoading(loading) {\n    this.isLoading = loading;\n  }\n  setError(error) {\n    this.error = error;\n  }\n  setCities(cities) {\n    this.cities = cities;\n  }\n  // В ProductStore.js добавьте метод\n  async fetchProductsFromMultipleCities(cities) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const promises = cities.map(city => fetch(`http://localhost:5000/api/prod/city/${encodeURIComponent(city)}`).then(response => response.ok ? response.json() : []).catch(() => []));\n      const results = await Promise.all(promises);\n      const allProducts = results.flat();\n      this.setProducts(allProducts);\n      this.setTotalCount(allProducts.length);\n    } catch (error) {\n      console.error('Ошибка при загрузке товаров из нескольких городов:', error);\n      this.setError('Не удалось загрузить товары');\n    } finally {\n      this.setLoading(false);\n    }\n  }\n  // Получение списка городов из БД\n  async fetchCities() {\n    try {\n      const response = await fetch('http://localhost:5000/api/prod/cities');\n      if (response.ok) {\n        const data = await response.json();\n        this.setCities(data);\n        return data;\n      }\n    } catch (error) {\n      console.error('Ошибка при получении городов:', error);\n    }\n    return [];\n  }\n\n  // Получение всех продуктов (с пагинацией и фильтрами)\n  async fetchProducts(filters = {}) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      let url = `http://localhost:5000/api/prod?page=${this.page}&limit=${this.limit}`;\n      const queryParams = new URLSearchParams();\n      if (filters.typeId) {\n        queryParams.append('typeId', filters.typeId);\n      }\n      if (filters.sellerId) {\n        queryParams.append('sellerId', filters.sellerId);\n      }\n      if (this.selectedCity) {\n        queryParams.append('city', this.selectedCity);\n      }\n      const queryString = queryParams.toString();\n      if (queryString) {\n        url += `&${queryString}`;\n      }\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      this.setProducts(data.rows || data);\n      this.setTotalCount(data.count || data.length);\n    } catch (error) {\n      console.error('Ошибка при получении продуктов:', error);\n      this.setError('Не удалось загрузить товары');\n      this.setProducts([]);\n      this.setTotalCount(0);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Получение продуктов по конкретному городу\n  async fetchProductsByCity(city) {\n    this.setLoading(true);\n    this.setError(null);\n    this.setSelectedCity(city);\n    try {\n      const response = await fetch(`http://localhost:5000/api/prod/city/${encodeURIComponent(city)}`);\n      if (!response.ok) {\n        // Если товаров для города нет, пробуем загрузить все\n        await this.fetchProducts();\n        return;\n      }\n      const data = await response.json();\n      this.setProducts(data);\n      this.setTotalCount(data.length);\n    } catch (error) {\n      console.error('Ошибка при получении продуктов по городу:', error);\n      this.setError(`Не удалось загрузить товары для города ${city}`);\n      await this.fetchProducts();\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Получение одного продукта по ID\n  async fetchProductById(id) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const response = await fetch(`http://localhost:5000/api/prod/prod/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Ошибка при получении продукта:', error);\n      this.setError('Не удалось загрузить информацию о товаре');\n      return null;\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Сброс фильтров\n  async resetFilters() {\n    this.setSelectedCity('');\n    sessionStorage.removeItem('city');\n    await this.fetchProducts();\n  }\n\n  // Получение текущего города\n  get currentCity() {\n    return this.selectedCity || sessionStorage.getItem('city') || 'Выберите город';\n  }\n\n  // Есть ли выбранный город\n  get hasSelectedCity() {\n    return !!this.selectedCity;\n  }\n}\n\n// Создаем экземпляр store\nexport const productStore = new ProductStore();","map":{"version":3,"names":["makeAutoObservable","ProductStore","constructor","products","totalCount","limit","page","selectedCity","isLoading","error","cities","initializeCity","savedCity","sessionStorage","getItem","setProducts","setTotalCount","count","setPage","setSelectedCity","city","setItem","setLoading","loading","setError","setCities","fetchProductsFromMultipleCities","promises","map","fetch","encodeURIComponent","then","response","ok","json","catch","results","Promise","all","allProducts","flat","length","console","fetchCities","data","fetchProducts","filters","url","queryParams","URLSearchParams","typeId","append","sellerId","queryString","toString","Error","status","rows","fetchProductsByCity","fetchProductById","id","resetFilters","removeItem","currentCity","hasSelectedCity","productStore"],"sources":["D:/nkurs/client/src/store/ProductStore.js"],"sourcesContent":["// store/ProductStore.js\r\nimport { makeAutoObservable } from 'mobx';\r\n\r\nclass ProductStore {\r\n    products = [];\r\n    totalCount = 0;\r\n    limit = 9;\r\n    page = 1;\r\n    selectedCity = '';\r\n    isLoading = false;\r\n    error = null;\r\n    cities = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.initializeCity();\r\n    }\r\n\r\n    // Инициализация города при загрузке store\r\n    initializeCity() {\r\n        const savedCity = sessionStorage.getItem('city');\r\n        if (savedCity) {\r\n            this.selectedCity = savedCity;\r\n        }\r\n    }\r\n\r\n    setProducts(products) {\r\n        this.products = products;\r\n    }\r\n\r\n    setTotalCount(count) {\r\n        this.totalCount = count;\r\n    }\r\n\r\n    setPage(page) {\r\n        this.page = page;\r\n    }\r\n\r\n    setSelectedCity(city) {\r\n        this.selectedCity = city;\r\n        sessionStorage.setItem('city', city);\r\n    }\r\n\r\n    setLoading(loading) {\r\n        this.isLoading = loading;\r\n    }\r\n\r\n    setError(error) {\r\n        this.error = error;\r\n    }\r\n\r\n    setCities(cities) {\r\n        this.cities = cities;\r\n    }\r\n// В ProductStore.js добавьте метод\r\nasync fetchProductsFromMultipleCities(cities) {\r\n    this.setLoading(true);\r\n    this.setError(null);\r\n    \r\n    try {\r\n        const promises = cities.map(city => \r\n            fetch(`http://localhost:5000/api/prod/city/${encodeURIComponent(city)}`)\r\n                .then(response => response.ok ? response.json() : [])\r\n                .catch(() => [])\r\n        );\r\n\r\n        const results = await Promise.all(promises);\r\n        const allProducts = results.flat();\r\n        \r\n        this.setProducts(allProducts);\r\n        this.setTotalCount(allProducts.length);\r\n        \r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров из нескольких городов:', error);\r\n        this.setError('Не удалось загрузить товары');\r\n    } finally {\r\n        this.setLoading(false);\r\n    }\r\n}\r\n    // Получение списка городов из БД\r\n    async fetchCities() {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/prod/cities');\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                this.setCities(data);\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при получении городов:', error);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    // Получение всех продуктов (с пагинацией и фильтрами)\r\n    async fetchProducts(filters = {}) {\r\n        this.setLoading(true);\r\n        this.setError(null);\r\n        \r\n        try {\r\n            let url = `http://localhost:5000/api/prod?page=${this.page}&limit=${this.limit}`;\r\n            \r\n            const queryParams = new URLSearchParams();\r\n            \r\n            if (filters.typeId) {\r\n                queryParams.append('typeId', filters.typeId);\r\n            }\r\n            if (filters.sellerId) {\r\n                queryParams.append('sellerId', filters.sellerId);\r\n            }\r\n            if (this.selectedCity) {\r\n                queryParams.append('city', this.selectedCity);\r\n            }\r\n            \r\n            const queryString = queryParams.toString();\r\n            if (queryString) {\r\n                url += `&${queryString}`;\r\n            }\r\n\r\n            const response = await fetch(url);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            this.setProducts(data.rows || data);\r\n            this.setTotalCount(data.count || data.length);\r\n            \r\n        } catch (error) {\r\n            console.error('Ошибка при получении продуктов:', error);\r\n            this.setError('Не удалось загрузить товары');\r\n            this.setProducts([]);\r\n            this.setTotalCount(0);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Получение продуктов по конкретному городу\r\n    async fetchProductsByCity(city) {\r\n        this.setLoading(true);\r\n        this.setError(null);\r\n        this.setSelectedCity(city);\r\n        \r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/prod/city/${encodeURIComponent(city)}`);\r\n            \r\n            if (!response.ok) {\r\n                // Если товаров для города нет, пробуем загрузить все\r\n                await this.fetchProducts();\r\n                return;\r\n            }\r\n            \r\n            const data = await response.json();\r\n            this.setProducts(data);\r\n            this.setTotalCount(data.length);\r\n            \r\n        } catch (error) {\r\n            console.error('Ошибка при получении продуктов по городу:', error);\r\n            this.setError(`Не удалось загрузить товары для города ${city}`);\r\n            await this.fetchProducts();\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Получение одного продукта по ID\r\n    async fetchProductById(id) {\r\n        this.setLoading(true);\r\n        this.setError(null);\r\n        \r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/prod/prod/${id}`);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            return data;\r\n            \r\n        } catch (error) {\r\n            console.error('Ошибка при получении продукта:', error);\r\n            this.setError('Не удалось загрузить информацию о товаре');\r\n            return null;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Сброс фильтров\r\n    async resetFilters() {\r\n        this.setSelectedCity('');\r\n        sessionStorage.removeItem('city');\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Получение текущего города\r\n    get currentCity() {\r\n        return this.selectedCity || sessionStorage.getItem('city') || 'Выберите город';\r\n    }\r\n\r\n    // Есть ли выбранный город\r\n    get hasSelectedCity() {\r\n        return !!this.selectedCity;\r\n    }\r\n}\r\n\r\n// Создаем экземпляр store\r\nexport const productStore = new ProductStore();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}