{"ast":null,"code":"// store/ProductStore.js\nimport { makeAutoObservable } from 'mobx';\nclass ProductStore {\n  constructor() {\n    this.products = [];\n    this.selectedCity = '';\n    this.isLoading = false;\n    this.error = '';\n    this.hasActiveSearch = false;\n    this.currentSearchQuery = '';\n    this.totalCount = 0;\n    this.page = 1;\n    this.limit = 12;\n    makeAutoObservable(this);\n  }\n\n  // Установка выбранного города\n  setSelectedCity(city) {\n    this.selectedCity = city;\n    this.fetchProducts();\n  }\n\n  // Загрузка товаров\n  async fetchProducts(filters = {}) {\n    this.isLoading = true;\n    this.error = '';\n    try {\n      let url = `http://localhost:5000/api/prod?page=${this.page}&limit=${this.limit}`;\n\n      // Добавляем фильтр города если выбран\n      if (this.selectedCity) {\n        url += `&city=${encodeURIComponent(this.selectedCity)}`;\n      }\n\n      // Добавляем фильтры цен\n      if (filters.minPrice) {\n        url += `&minPrice=${filters.minPrice}`;\n      }\n      if (filters.maxPrice) {\n        url += `&maxPrice=${filters.maxPrice}`;\n      }\n\n      // Исключаем товары без цены если не включен чекбокс\n      if (filters.includeNoPrice === false) {\n        url += `&excludeNoPrice=true`;\n      }\n\n      // Добавляем другие фильтры\n      if (filters.categoryId) {\n        url += `&typeId=${filters.categoryId}`;\n      }\n      if (filters.sortBy) {\n        url += `&sort=${filters.sortBy}`;\n      }\n\n      // Добавляем фильтры характеристик\n      if (filters.characteristics && Object.keys(filters.characteristics).length > 0) {\n        Object.entries(filters.characteristics).forEach(([key, values]) => {\n          values.forEach(value => {\n            url += `&characteristic=${encodeURIComponent(key)}:${encodeURIComponent(value)}`;\n          });\n        });\n      }\n      console.log('Fetch products URL:', url); // Для отладки\n\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Ошибка при загрузке товаров');\n      }\n      const data = await response.json();\n      this.products = data.rows || data;\n      this.totalCount = data.count || this.products.length;\n      this.hasActiveSearch = false;\n      this.currentSearchQuery = '';\n    } catch (error) {\n      console.error('Ошибка при загрузке товаров:', error);\n      this.error = 'Не удалось загрузить товары. Попробуйте позже.';\n      this.products = [];\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Поиск товаров\n  async searchProducts(query, filters = {}) {\n    this.isLoading = true;\n    this.error = '';\n    try {\n      let url = `http://localhost:5000/api/prod/search?q=${encodeURIComponent(query)}&page=${this.page}&limit=${this.limit}`;\n\n      // Добавляем фильтр города если выбран\n      if (this.selectedCity) {\n        url += `&city=${encodeURIComponent(this.selectedCity)}`;\n      }\n\n      // Добавляем фильтры цен\n      if (filters.minPrice) {\n        url += `&minPrice=${filters.minPrice}`;\n      }\n      if (filters.maxPrice) {\n        url += `&maxPrice=${filters.maxPrice}`;\n      }\n\n      // Исключаем товары без цены если не включен чекбокс\n      if (filters.includeNoPrice === false) {\n        url += `&excludeNoPrice=true`;\n      }\n\n      // Добавляем другие фильтры\n      if (filters.categoryId) {\n        url += `&typeId=${filters.categoryId}`;\n      }\n      if (filters.sortBy) {\n        url += `&sort=${filters.sortBy}`;\n      }\n\n      // Добавляем фильтры характеристик\n      if (filters.characteristics && Object.keys(filters.characteristics).length > 0) {\n        Object.entries(filters.characteristics).forEach(([key, values]) => {\n          values.forEach(value => {\n            url += `&characteristic=${encodeURIComponent(key)}:${encodeURIComponent(value)}`;\n          });\n        });\n      }\n      console.log('Search products URL:', url); // Для отладки\n\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Ошибка при поиске товаров');\n      }\n      const data = await response.json();\n      this.products = data.rows || data;\n      this.totalCount = data.count || this.products.length;\n      this.hasActiveSearch = true;\n      this.currentSearchQuery = query;\n    } catch (error) {\n      console.error('Ошибка при поиске товаров:', error);\n      this.error = 'Не удалось выполнить поиск. Попробуйте позже.';\n      this.products = [];\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Очистка поиска\n  async clearSearch() {\n    this.hasActiveSearch = false;\n    this.currentSearchQuery = '';\n    await this.fetchProducts();\n  }\n\n  // Установка страницы\n  setPage(page) {\n    this.page = page;\n  }\n\n  // Сброс ошибки\n  clearError() {\n    this.error = '';\n  }\n}\nexport default ProductStore;","map":{"version":3,"names":["makeAutoObservable","ProductStore","constructor","products","selectedCity","isLoading","error","hasActiveSearch","currentSearchQuery","totalCount","page","limit","setSelectedCity","city","fetchProducts","filters","url","encodeURIComponent","minPrice","maxPrice","includeNoPrice","categoryId","sortBy","characteristics","Object","keys","length","entries","forEach","key","values","value","console","log","response","fetch","ok","Error","data","json","rows","count","searchProducts","query","clearSearch","setPage","clearError"],"sources":["D:/nkurs/client/src/store/ProductStore.js"],"sourcesContent":["// store/ProductStore.js\r\nimport { makeAutoObservable } from 'mobx';\r\n\r\nclass ProductStore {\r\n    products = [];\r\n    selectedCity = '';\r\n    isLoading = false;\r\n    error = '';\r\n    hasActiveSearch = false;\r\n    currentSearchQuery = '';\r\n    totalCount = 0;\r\n    page = 1;\r\n    limit = 12;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    // Установка выбранного города\r\n    setSelectedCity(city) {\r\n        this.selectedCity = city;\r\n        this.fetchProducts();\r\n    }\r\n\r\n    // Загрузка товаров\r\n    async fetchProducts(filters = {}) {\r\n        this.isLoading = true;\r\n        this.error = '';\r\n        \r\n        try {\r\n            let url = `http://localhost:5000/api/prod?page=${this.page}&limit=${this.limit}`;\r\n            \r\n            // Добавляем фильтр города если выбран\r\n            if (this.selectedCity) {\r\n                url += `&city=${encodeURIComponent(this.selectedCity)}`;\r\n            }\r\n\r\n            // Добавляем фильтры цен\r\n            if (filters.minPrice) {\r\n                url += `&minPrice=${filters.minPrice}`;\r\n            }\r\n\r\n            if (filters.maxPrice) {\r\n                url += `&maxPrice=${filters.maxPrice}`;\r\n            }\r\n\r\n            // Исключаем товары без цены если не включен чекбокс\r\n            if (filters.includeNoPrice === false) {\r\n                url += `&excludeNoPrice=true`;\r\n            }\r\n\r\n            // Добавляем другие фильтры\r\n            if (filters.categoryId) {\r\n                url += `&typeId=${filters.categoryId}`;\r\n            }\r\n\r\n            if (filters.sortBy) {\r\n                url += `&sort=${filters.sortBy}`;\r\n            }\r\n\r\n            // Добавляем фильтры характеристик\r\n            if (filters.characteristics && Object.keys(filters.characteristics).length > 0) {\r\n                Object.entries(filters.characteristics).forEach(([key, values]) => {\r\n                    values.forEach(value => {\r\n                        url += `&characteristic=${encodeURIComponent(key)}:${encodeURIComponent(value)}`;\r\n                    });\r\n                });\r\n            }\r\n\r\n            console.log('Fetch products URL:', url); // Для отладки\r\n\r\n            const response = await fetch(url);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Ошибка при загрузке товаров');\r\n            }\r\n\r\n            const data = await response.json();\r\n            this.products = data.rows || data;\r\n            this.totalCount = data.count || this.products.length;\r\n            this.hasActiveSearch = false;\r\n            this.currentSearchQuery = '';\r\n\r\n        } catch (error) {\r\n            console.error('Ошибка при загрузке товаров:', error);\r\n            this.error = 'Не удалось загрузить товары. Попробуйте позже.';\r\n            this.products = [];\r\n        } finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    // Поиск товаров\r\n    async searchProducts(query, filters = {}) {\r\n        this.isLoading = true;\r\n        this.error = '';\r\n        \r\n        try {\r\n            let url = `http://localhost:5000/api/prod/search?q=${encodeURIComponent(query)}&page=${this.page}&limit=${this.limit}`;\r\n            \r\n            // Добавляем фильтр города если выбран\r\n            if (this.selectedCity) {\r\n                url += `&city=${encodeURIComponent(this.selectedCity)}`;\r\n            }\r\n\r\n            // Добавляем фильтры цен\r\n            if (filters.minPrice) {\r\n                url += `&minPrice=${filters.minPrice}`;\r\n            }\r\n\r\n            if (filters.maxPrice) {\r\n                url += `&maxPrice=${filters.maxPrice}`;\r\n            }\r\n\r\n            // Исключаем товары без цены если не включен чекбокс\r\n            if (filters.includeNoPrice === false) {\r\n                url += `&excludeNoPrice=true`;\r\n            }\r\n\r\n            // Добавляем другие фильтры\r\n            if (filters.categoryId) {\r\n                url += `&typeId=${filters.categoryId}`;\r\n            }\r\n\r\n            if (filters.sortBy) {\r\n                url += `&sort=${filters.sortBy}`;\r\n            }\r\n\r\n            // Добавляем фильтры характеристик\r\n            if (filters.characteristics && Object.keys(filters.characteristics).length > 0) {\r\n                Object.entries(filters.characteristics).forEach(([key, values]) => {\r\n                    values.forEach(value => {\r\n                        url += `&characteristic=${encodeURIComponent(key)}:${encodeURIComponent(value)}`;\r\n                    });\r\n                });\r\n            }\r\n\r\n            console.log('Search products URL:', url); // Для отладки\r\n\r\n            const response = await fetch(url);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Ошибка при поиске товаров');\r\n            }\r\n\r\n            const data = await response.json();\r\n            this.products = data.rows || data;\r\n            this.totalCount = data.count || this.products.length;\r\n            this.hasActiveSearch = true;\r\n            this.currentSearchQuery = query;\r\n\r\n        } catch (error) {\r\n            console.error('Ошибка при поиске товаров:', error);\r\n            this.error = 'Не удалось выполнить поиск. Попробуйте позже.';\r\n            this.products = [];\r\n        } finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    // Очистка поиска\r\n    async clearSearch() {\r\n        this.hasActiveSearch = false;\r\n        this.currentSearchQuery = '';\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Установка страницы\r\n    setPage(page) {\r\n        this.page = page;\r\n    }\r\n\r\n    // Сброс ошибки\r\n    clearError() {\r\n        this.error = '';\r\n    }\r\n}\r\n\r\nexport default ProductStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}