{"ast":null,"code":"var _jsxFileName = \"D:\\\\nkurs\\\\client\\\\src\\\\components\\\\CityDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport geo from '../assets/geo.png';\nimport CitySelectorModal from '../components/modals/CitySelector';\nimport { Context } from '../index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityDisplay = () => {\n  _s();\n  const {\n    product\n  } = useContext(Context);\n  const [city, setCity] = useState('Выберите город');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [cities, setCities] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Получаем текущее местоположение пользователя\n  useEffect(() => {\n    const getCurrentLocation = () => {\n      if (navigator.geolocation) {\n        setIsLoading(true);\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          setUserLocation({\n            lat: latitude,\n            lng: longitude\n          });\n          try {\n            // Используем наш бэкенд для геокодирования\n            const response = await fetch(`http://localhost:5000/api/products/geocode?lat=${latitude}&lng=${longitude}`);\n            if (response.ok) {\n              const data = await response.json();\n              const currentCity = data.city;\n              setCity(currentCity);\n              setSelectedCity(currentCity);\n              sessionStorage.setItem('city', currentCity);\n              sessionStorage.setItem('userLocation', JSON.stringify({\n                lat: latitude,\n                lng: longitude\n              }));\n            }\n          } catch (error) {\n            console.error('Ошибка при определении города:', error);\n            // Резервный вариант через внешний API\n            const backupResponse = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=ru`);\n            const backupData = await backupResponse.json();\n            const currentCity = backupData.city || backupData.locality || 'Неизвестный город';\n            setCity(currentCity);\n            setSelectedCity(currentCity);\n            sessionStorage.setItem('city', currentCity);\n          }\n          setIsLoading(false);\n        }, error => {\n          console.error('Ошибка геолокации:', error);\n          setIsLoading(false);\n          // Если геолокация недоступна, пытаемся получить город из sessionStorage\n          const savedCity = sessionStorage.getItem('city');\n          if (savedCity) {\n            setCity(savedCity);\n            setSelectedCity(savedCity);\n          }\n        });\n      } else {\n        console.log('Геолокация не поддерживается');\n        const savedCity = sessionStorage.getItem('city');\n        if (savedCity) {\n          setCity(savedCity);\n          setSelectedCity(savedCity);\n        }\n      }\n    };\n    getCurrentLocation();\n  }, []);\n\n  // Получаем список городов из базы данных\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/products/cities');\n        if (response.ok) {\n          const data = await response.json();\n          setCities(data);\n        }\n      } catch (error) {\n        console.error('Ошибка при получении городов:', error);\n      }\n    };\n    fetchCities();\n  }, []);\n  const handleCitySelect = async selectedCityData => {\n    if (selectedCityData) {\n      const cityName = selectedCityData.name || selectedCityData.city || selectedCityData;\n      setCity(cityName);\n      setSelectedCity(cityName);\n      sessionStorage.setItem('city', cityName);\n\n      // Сохраняем координаты если есть\n      if (selectedCityData.lat && selectedCityData.lng) {\n        sessionStorage.setItem('userLocation', JSON.stringify({\n          lat: selectedCityData.lat,\n          lng: selectedCityData.lng\n        }));\n      }\n\n      // Загружаем товары для выбранного города\n      try {\n        if (product && product.fetchProductsByCity) {\n          await product.fetchProductsByCity(cityName);\n        }\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    }\n    setShowModal(false);\n  };\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: geo,\n      style: {\n        width: '24px',\n        height: '24px',\n        cursor: 'pointer',\n        opacity: isLoading ? 0.6 : 1\n      },\n      alt: \"\\u0413\\u0435\\u043E\\u043B\\u043E\\u043A\\u0430\\u0446\\u0438\\u044F\",\n      onClick: handleOpenModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleOpenModal,\n      style: {\n        cursor: 'pointer',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: '12px',\n          color: '#666'\n        },\n        children: \"\\u0412\\u0430\\u0448 \\u0433\\u043E\\u0440\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: '14px',\n          fontWeight: 'bold'\n        },\n        children: isLoading ? 'Определяем...' : city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CitySelectorModal, {\n      show: showModal,\n      handleClose: handleCloseModal,\n      onCitySelect: handleCitySelect,\n      cities: cities,\n      userLocation: userLocation,\n      selectedCity: selectedCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(CityDisplay, \"IMDIobm+AA9rCb72xNiK4G46krM=\");\n_c = CityDisplay;\nexport default CityDisplay;\nvar _c;\n$RefreshReg$(_c, \"CityDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useContext","geo","CitySelectorModal","Context","jsxDEV","_jsxDEV","CityDisplay","_s","product","city","setCity","selectedCity","setSelectedCity","showModal","setShowModal","cities","setCities","userLocation","setUserLocation","isLoading","setIsLoading","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","response","fetch","ok","data","json","currentCity","sessionStorage","setItem","JSON","stringify","error","console","backupResponse","backupData","locality","savedCity","getItem","log","fetchCities","handleCitySelect","selectedCityData","cityName","name","fetchProductsByCity","handleOpenModal","handleCloseModal","style","display","alignItems","gap","children","src","width","height","cursor","opacity","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","flexDirection","fontSize","color","fontWeight","show","handleClose","onCitySelect","_c","$RefreshReg$"],"sources":["D:/nkurs/client/src/components/CityDisplay.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport geo from '../assets/geo.png'; \r\nimport CitySelectorModal from '../components/modals/CitySelector';\r\nimport { Context } from '../index';\r\n\r\nconst CityDisplay = () => {\r\n    const { product } = useContext(Context);\r\n    const [city, setCity] = useState('Выберите город'); \r\n    const [selectedCity, setSelectedCity] = useState('');\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [cities, setCities] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Получаем текущее местоположение пользователя\r\n    useEffect(() => {\r\n        const getCurrentLocation = () => {\r\n            if (navigator.geolocation) {\r\n                setIsLoading(true);\r\n                navigator.geolocation.getCurrentPosition(\r\n                    async (position) => {\r\n                        const { latitude, longitude } = position.coords;\r\n                        setUserLocation({ lat: latitude, lng: longitude });\r\n                        \r\n                        try {\r\n                            // Используем наш бэкенд для геокодирования\r\n                            const response = await fetch(`http://localhost:5000/api/products/geocode?lat=${latitude}&lng=${longitude}`);\r\n                            if (response.ok) {\r\n                                const data = await response.json();\r\n                                const currentCity = data.city;\r\n                                setCity(currentCity);\r\n                                setSelectedCity(currentCity);\r\n                                sessionStorage.setItem('city', currentCity);\r\n                                sessionStorage.setItem('userLocation', JSON.stringify({ lat: latitude, lng: longitude }));\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Ошибка при определении города:', error);\r\n                            // Резервный вариант через внешний API\r\n                            const backupResponse = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=ru`);\r\n                            const backupData = await backupResponse.json();\r\n                            const currentCity = backupData.city || backupData.locality || 'Неизвестный город';\r\n                            setCity(currentCity);\r\n                            setSelectedCity(currentCity);\r\n                            sessionStorage.setItem('city', currentCity);\r\n                        }\r\n                        setIsLoading(false);\r\n                    },\r\n                    (error) => {\r\n                        console.error('Ошибка геолокации:', error);\r\n                        setIsLoading(false);\r\n                        // Если геолокация недоступна, пытаемся получить город из sessionStorage\r\n                        const savedCity = sessionStorage.getItem('city');\r\n                        if (savedCity) {\r\n                            setCity(savedCity);\r\n                            setSelectedCity(savedCity);\r\n                        }\r\n                    }\r\n                );\r\n            } else {\r\n                console.log('Геолокация не поддерживается');\r\n                const savedCity = sessionStorage.getItem('city');\r\n                if (savedCity) {\r\n                    setCity(savedCity);\r\n                    setSelectedCity(savedCity);\r\n                }\r\n            }\r\n        };\r\n\r\n        getCurrentLocation();\r\n    }, []);\r\n\r\n    // Получаем список городов из базы данных\r\n    useEffect(() => {\r\n        const fetchCities = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/products/cities');\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setCities(data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка при получении городов:', error);\r\n            }\r\n        };\r\n\r\n        fetchCities();\r\n    }, []);\r\n\r\n    const handleCitySelect = async (selectedCityData) => {\r\n        if (selectedCityData) {\r\n            const cityName = selectedCityData.name || selectedCityData.city || selectedCityData;\r\n            setCity(cityName);\r\n            setSelectedCity(cityName);\r\n            sessionStorage.setItem('city', cityName);\r\n            \r\n            // Сохраняем координаты если есть\r\n            if (selectedCityData.lat && selectedCityData.lng) {\r\n                sessionStorage.setItem('userLocation', JSON.stringify({\r\n                    lat: selectedCityData.lat,\r\n                    lng: selectedCityData.lng\r\n                }));\r\n            }\r\n\r\n            // Загружаем товары для выбранного города\r\n            try {\r\n                if (product && product.fetchProductsByCity) {\r\n                    await product.fetchProductsByCity(cityName);\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке товаров:', error);\r\n            }\r\n        }\r\n        setShowModal(false);\r\n    };\r\n\r\n    const handleOpenModal = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n            <img \r\n                src={geo} \r\n                style={{ \r\n                    width: '24px', \r\n                    height: '24px', \r\n                    cursor: 'pointer',\r\n                    opacity: isLoading ? 0.6 : 1\r\n                }} \r\n                alt=\"Геолокация\" \r\n                onClick={handleOpenModal}\r\n            />\r\n            <div \r\n                onClick={handleOpenModal} \r\n                style={{ \r\n                    cursor: 'pointer',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    alignItems: 'flex-start'\r\n                }}\r\n            >\r\n                <span style={{ fontSize: '12px', color: '#666' }}>Ваш город</span>\r\n                <span style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                    {isLoading ? 'Определяем...' : city}\r\n                </span>\r\n            </div>\r\n            \r\n            <CitySelectorModal \r\n                show={showModal} \r\n                handleClose={handleCloseModal}\r\n                onCitySelect={handleCitySelect}\r\n                cities={cities}\r\n                userLocation={userLocation}\r\n                selectedCity={selectedCity}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityDisplay;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,iBAAiB,MAAM,mCAAmC;AACjE,SAASC,OAAO,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAQ,CAAC,GAAGR,UAAU,CAACG,OAAO,CAAC;EACvC,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,gBAAgB,CAAC;EAClD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACAD,SAAS,CAAC,MAAM;IACZ,MAAMuB,kBAAkB,GAAGA,CAAA,KAAM;MAC7B,IAAIC,SAAS,CAACC,WAAW,EAAE;QACvBH,YAAY,CAAC,IAAI,CAAC;QAClBE,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACpC,MAAOC,QAAQ,IAAK;UAChB,MAAM;YAAEC,QAAQ;YAAEC;UAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;UAC/CV,eAAe,CAAC;YAAEW,GAAG,EAAEH,QAAQ;YAAEI,GAAG,EAAEH;UAAU,CAAC,CAAC;UAElD,IAAI;YACA;YACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkDN,QAAQ,QAAQC,SAAS,EAAE,CAAC;YAC3G,IAAII,QAAQ,CAACE,EAAE,EAAE;cACb,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;cAClC,MAAMC,WAAW,GAAGF,IAAI,CAACzB,IAAI;cAC7BC,OAAO,CAAC0B,WAAW,CAAC;cACpBxB,eAAe,CAACwB,WAAW,CAAC;cAC5BC,cAAc,CAACC,OAAO,CAAC,MAAM,EAAEF,WAAW,CAAC;cAC3CC,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAAC;gBAAEX,GAAG,EAAEH,QAAQ;gBAAEI,GAAG,EAAEH;cAAU,CAAC,CAAC,CAAC;YAC7F;UACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;YACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;YACtD;YACA,MAAME,cAAc,GAAG,MAAMX,KAAK,CAAC,qEAAqEN,QAAQ,cAAcC,SAAS,sBAAsB,CAAC;YAC9J,MAAMiB,UAAU,GAAG,MAAMD,cAAc,CAACR,IAAI,CAAC,CAAC;YAC9C,MAAMC,WAAW,GAAGQ,UAAU,CAACnC,IAAI,IAAImC,UAAU,CAACC,QAAQ,IAAI,mBAAmB;YACjFnC,OAAO,CAAC0B,WAAW,CAAC;YACpBxB,eAAe,CAACwB,WAAW,CAAC;YAC5BC,cAAc,CAACC,OAAO,CAAC,MAAM,EAAEF,WAAW,CAAC;UAC/C;UACAhB,YAAY,CAAC,KAAK,CAAC;QACvB,CAAC,EACAqB,KAAK,IAAK;UACPC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;UAC1CrB,YAAY,CAAC,KAAK,CAAC;UACnB;UACA,MAAM0B,SAAS,GAAGT,cAAc,CAACU,OAAO,CAAC,MAAM,CAAC;UAChD,IAAID,SAAS,EAAE;YACXpC,OAAO,CAACoC,SAAS,CAAC;YAClBlC,eAAe,CAACkC,SAAS,CAAC;UAC9B;QACJ,CACJ,CAAC;MACL,CAAC,MAAM;QACHJ,OAAO,CAACM,GAAG,CAAC,8BAA8B,CAAC;QAC3C,MAAMF,SAAS,GAAGT,cAAc,CAACU,OAAO,CAAC,MAAM,CAAC;QAChD,IAAID,SAAS,EAAE;UACXpC,OAAO,CAACoC,SAAS,CAAC;UAClBlC,eAAe,CAACkC,SAAS,CAAC;QAC9B;MACJ;IACJ,CAAC;IAEDzB,kBAAkB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvB,SAAS,CAAC,MAAM;IACZ,MAAMmD,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,CAAC;QACzE,IAAID,QAAQ,CAACE,EAAE,EAAE;UACb,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCnB,SAAS,CAACkB,IAAI,CAAC;QACnB;MACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD;IACJ,CAAC;IAEDQ,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,gBAAgB,GAAG,MAAOC,gBAAgB,IAAK;IACjD,IAAIA,gBAAgB,EAAE;MAClB,MAAMC,QAAQ,GAAGD,gBAAgB,CAACE,IAAI,IAAIF,gBAAgB,CAAC1C,IAAI,IAAI0C,gBAAgB;MACnFzC,OAAO,CAAC0C,QAAQ,CAAC;MACjBxC,eAAe,CAACwC,QAAQ,CAAC;MACzBf,cAAc,CAACC,OAAO,CAAC,MAAM,EAAEc,QAAQ,CAAC;;MAExC;MACA,IAAID,gBAAgB,CAACtB,GAAG,IAAIsB,gBAAgB,CAACrB,GAAG,EAAE;QAC9CO,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAAC;UAClDX,GAAG,EAAEsB,gBAAgB,CAACtB,GAAG;UACzBC,GAAG,EAAEqB,gBAAgB,CAACrB;QAC1B,CAAC,CAAC,CAAC;MACP;;MAEA;MACA,IAAI;QACA,IAAItB,OAAO,IAAIA,OAAO,CAAC8C,mBAAmB,EAAE;UACxC,MAAM9C,OAAO,CAAC8C,mBAAmB,CAACF,QAAQ,CAAC;QAC/C;MACJ,CAAC,CAAC,OAAOX,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ;IACA3B,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMyC,eAAe,GAAGA,CAAA,KAAM;IAC1BzC,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAM0C,gBAAgB,GAAGA,CAAA,KAAM;IAC3B1C,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,oBACIT,OAAA;IAAKoD,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE,QAAQ;MAAEC,GAAG,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC/DxD,OAAA;MACIyD,GAAG,EAAE7D,GAAI;MACTwD,KAAK,EAAE;QACHM,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdC,MAAM,EAAE,SAAS;QACjBC,OAAO,EAAE/C,SAAS,GAAG,GAAG,GAAG;MAC/B,CAAE;MACFgD,GAAG,EAAC,8DAAY;MAChBC,OAAO,EAAEb;IAAgB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACFnE,OAAA;MACI+D,OAAO,EAAEb,eAAgB;MACzBE,KAAK,EAAE;QACHQ,MAAM,EAAE,SAAS;QACjBP,OAAO,EAAE,MAAM;QACfe,aAAa,EAAE,QAAQ;QACvBd,UAAU,EAAE;MAChB,CAAE;MAAAE,QAAA,gBAEFxD,OAAA;QAAMoD,KAAK,EAAE;UAAEiB,QAAQ,EAAE,MAAM;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAAd,QAAA,EAAC;MAAS;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAClEnE,OAAA;QAAMoD,KAAK,EAAE;UAAEiB,QAAQ,EAAE,MAAM;UAAEE,UAAU,EAAE;QAAO,CAAE;QAAAf,QAAA,EACjD1C,SAAS,GAAG,eAAe,GAAGV;MAAI;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENnE,OAAA,CAACH,iBAAiB;MACd2E,IAAI,EAAEhE,SAAU;MAChBiE,WAAW,EAAEtB,gBAAiB;MAC9BuB,YAAY,EAAE7B,gBAAiB;MAC/BnC,MAAM,EAAEA,MAAO;MACfE,YAAY,EAAEA,YAAa;MAC3BN,YAAY,EAAEA;IAAa;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACjE,EAAA,CA5JID,WAAW;AAAA0E,EAAA,GAAX1E,WAAW;AA8JjB,eAAeA,WAAW;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}