{"ast":null,"code":"var _jsxFileName = \"D:\\\\nkurs\\\\client\\\\src\\\\components\\\\CityDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport geo from '../assets/geo.png';\nimport CitySelectorModal from '../components/modals/CitySelector'; // Импортируем модальное окно\nimport { Context } from '../index'; // Импортируйте контекст\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityDisplay = () => {\n  _s();\n  const {\n    product\n  } = useContext(Context); // Получаем product из контекста\n  const [city, setCity] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [showModal, setShowModal] = useState(false); // Состояние для управления модальным окном\n  const [cities, setCities] = useState([]); // Состояние для хранения городов\n\n  useEffect(() => {\n    const getCity = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`);\n          const data = await response.json();\n          const currentCity = data.locality || 'Неизвестный город';\n          setCity(currentCity);\n          setSelectedCity(currentCity); // Устанавливаем текущее местоположение как выбранный город\n          sessionStorage.setItem('city', currentCity);\n        });\n      }\n    };\n    getCity();\n  }, []);\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/prod/cities'); // Замените на ваш правильный URL\n        const data = await response.json();\n        setCities(data); // Обновляем состояние с полученными городами\n      } catch (error) {\n        console.error('Ошибка при получении городов:', error);\n      }\n    };\n    fetchCities();\n  }, []); // Запрос уникальных городов выполняется один раз при монтировании компонента\n\n  const handleCityChange = async e => {\n    const newCity = e.target.value;\n    setSelectedCity(newCity);\n    setCity(newCity); // Обновляем текущий город на выбранный\n    sessionStorage.setItem('city', newCity); // Сохраняем выбранный город\n\n    // Вызываем метод для получения продуктов по выбранному городу\n    await product.fetchProductsByCity(newCity); // Обратите внимание на использование product\n  };\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: geo,\n      style: {\n        width: '40px',\n        height: '40px',\n        cursor: 'pointer'\n      },\n      alt: \"\\u0413\\u0435\\u043E\\u043B\\u043E\\u043A\\u0430\\u0446\\u0438\\u044F\",\n      onClick: handleOpenModal // Открытие модального окна по клику на изображение\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      onClick: handleOpenModal,\n      style: {\n        cursor: 'pointer'\n      },\n      children: city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(CitySelectorModal, {\n      show: showModal,\n      handleClose: handleCloseModal,\n      cities: cities // Передаем полученные города\n      ,\n      selectedCity: selectedCity,\n      handleCityChange: handleCityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(CityDisplay, \"mWOvEpyeXoUi/DJ+WZPPTm7aLC0=\");\n_c = CityDisplay;\nexport default CityDisplay;\nvar _c;\n$RefreshReg$(_c, \"CityDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useContext","geo","CitySelectorModal","Context","jsxDEV","_jsxDEV","CityDisplay","_s","product","city","setCity","selectedCity","setSelectedCity","showModal","setShowModal","cities","setCities","getCity","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","response","fetch","data","json","currentCity","locality","sessionStorage","setItem","fetchCities","error","console","handleCityChange","e","newCity","target","value","fetchProductsByCity","handleOpenModal","handleCloseModal","children","src","style","width","height","cursor","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","show","handleClose","_c","$RefreshReg$"],"sources":["D:/nkurs/client/src/components/CityDisplay.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport geo from '../assets/geo.png'; \r\nimport CitySelectorModal from '../components/modals/CitySelector'; // Импортируем модальное окно\r\nimport { Context } from '../index'; // Импортируйте контекст\r\n\r\nconst CityDisplay = () => {\r\n    const { product } = useContext(Context); // Получаем product из контекста\r\n    const [city, setCity] = useState(''); \r\n    const [selectedCity, setSelectedCity] = useState('');\r\n    const [showModal, setShowModal] = useState(false); // Состояние для управления модальным окном\r\n    const [cities, setCities] = useState([]); // Состояние для хранения городов\r\n\r\n    useEffect(() => {\r\n        const getCity = async () => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(async (position) => {\r\n                    const { latitude, longitude } = position.coords;\r\n                    const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`);\r\n                    const data = await response.json();\r\n                    const currentCity = data.locality || 'Неизвестный город';\r\n                    setCity(currentCity); \r\n                    setSelectedCity(currentCity); // Устанавливаем текущее местоположение как выбранный город\r\n                    sessionStorage.setItem('city', currentCity); \r\n                });\r\n            }\r\n        };\r\n\r\n        getCity();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchCities = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/prod/cities'); // Замените на ваш правильный URL\r\n                const data = await response.json();\r\n                setCities(data); // Обновляем состояние с полученными городами\r\n            } catch (error) {\r\n                console.error('Ошибка при получении городов:', error);\r\n            }\r\n        };\r\n\r\n        fetchCities();\r\n    }, []); // Запрос уникальных городов выполняется один раз при монтировании компонента\r\n\r\n    const handleCityChange = async (e) => {\r\n        const newCity = e.target.value;\r\n        setSelectedCity(newCity);\r\n        setCity(newCity); // Обновляем текущий город на выбранный\r\n        sessionStorage.setItem('city', newCity); // Сохраняем выбранный город\r\n\r\n        // Вызываем метод для получения продуктов по выбранному городу\r\n        await product.fetchProductsByCity(newCity); // Обратите внимание на использование product\r\n    };\r\n\r\n    const handleOpenModal = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <img \r\n                src={geo} \r\n                style={{ width: '40px', height: '40px', cursor: 'pointer' }} \r\n                alt=\"Геолокация\" \r\n                onClick={handleOpenModal} // Открытие модального окна по клику на изображение\r\n            />\r\n            <h5 onClick={handleOpenModal} style={{ cursor: 'pointer' }}>{city}</h5> {/* Открытие модального окна по клику на название города */}\r\n            <CitySelectorModal \r\n                show={showModal} \r\n                handleClose={handleCloseModal} \r\n                cities={cities} // Передаем полученные города\r\n                selectedCity={selectedCity} \r\n                handleCityChange={handleCityChange} \r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}