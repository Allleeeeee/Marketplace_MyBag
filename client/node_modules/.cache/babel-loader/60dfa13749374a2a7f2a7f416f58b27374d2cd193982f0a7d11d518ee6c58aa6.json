{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nclass ProductStore {\n  constructor() {\n    // Хранение списка продуктов\n    this.products = [];\n    // Хранение общего количества продуктов\n    this.totalCount = 0;\n    // Метод для получения продуктов с API\n    this.fetchProducts = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/prod'); // Ваш API\n        const data = await response.json();\n        this.setProducts(data.rows); // Предполагается, что вы получаете данные в формате { rows: [...] }\n        this.setTotalCount(data.count); // Убедитесь, что у вас есть общее количество\n      } catch (error) {\n        console.error('Ошибка при получении продуктов:', error);\n      }\n    };\n    makeAutoObservable(this);\n  }\n\n  // Установка списка продуктов\n  setProducts(products) {\n    this.products = products;\n  }\n\n  // Установка общего количества продуктов\n  setTotalCount(count) {\n    this.totalCount = count;\n  }\n}\n\n// Экспорт экземпляра ProductStore\nexport const productStore = new ProductStore();","map":{"version":3,"names":["makeAutoObservable","ProductStore","constructor","products","totalCount","fetchProducts","response","fetch","data","json","setProducts","rows","setTotalCount","count","error","console","productStore"],"sources":["D:/nkurs/client/src/store/ProductStore.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\n\r\nclass ProductStore {\r\n    // Хранение списка продуктов\r\n    products = [];\r\n    // Хранение общего количества продуктов\r\n    totalCount = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    // Установка списка продуктов\r\n    setProducts(products) {\r\n        this.products = products;\r\n    }\r\n\r\n    // Установка общего количества продуктов\r\n    setTotalCount(count) {\r\n        this.totalCount = count;\r\n    }\r\n\r\n    // Метод для получения продуктов с API\r\n    fetchProducts = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/prod'); // Ваш API\r\n            const data = await response.json();\r\n            this.setProducts(data.rows); // Предполагается, что вы получаете данные в формате { rows: [...] }\r\n            this.setTotalCount(data.count); // Убедитесь, что у вас есть общее количество\r\n        } catch (error) {\r\n            console.error('Ошибка при получении продуктов:', error);\r\n        }\r\n    };\r\n}\r\n\r\n// Экспорт экземпляра ProductStore\r\nexport const productStore = new ProductStore();"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AAEzC,MAAMC,YAAY,CAAC;EAMfC,WAAWA,CAAA,EAAG;IALd;IAAA,KACAC,QAAQ,GAAG,EAAE;IACb;IAAA,KACAC,UAAU,GAAG,CAAC;IAgBd;IAAA,KACAC,aAAa,GAAG,YAAY;MACxB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;QAChE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAI,CAACC,WAAW,CAACF,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC;QAC7B,IAAI,CAACC,aAAa,CAACJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAC3D;IACJ,CAAC;IAvBGd,kBAAkB,CAAC,IAAI,CAAC;EAC5B;;EAEA;EACAU,WAAWA,CAACP,QAAQ,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;;EAEA;EACAS,aAAaA,CAACC,KAAK,EAAE;IACjB,IAAI,CAACT,UAAU,GAAGS,KAAK;EAC3B;AAaJ;;AAEA;AACA,OAAO,MAAMG,YAAY,GAAG,IAAIf,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}