{"ast":null,"code":"// store/ProductStore.js\nimport { makeAutoObservable } from 'mobx';\nclass ProductStore {\n  constructor() {\n    this.products = [];\n    this.totalCount = 0;\n    this.limit = 9;\n    this.page = 1;\n    this.selectedCity = '';\n    this.isLoading = false;\n    this.error = null;\n    this.cities = [];\n    this.currentSearchQuery = '';\n    makeAutoObservable(this);\n    this.initializeCity();\n  }\n\n  // Инициализация города при загрузке store\n  initializeCity() {\n    const savedCity = sessionStorage.getItem('city');\n    if (savedCity) {\n      this.selectedCity = savedCity;\n    }\n  }\n  setProducts(products) {\n    this.products = products;\n  }\n  setTotalCount(count) {\n    this.totalCount = count;\n  }\n  setPage(page) {\n    this.page = page;\n  }\n  setSelectedCity(city) {\n    this.selectedCity = city;\n    sessionStorage.setItem('city', city);\n  }\n  setLoading(loading) {\n    this.isLoading = loading;\n  }\n  setError(error) {\n    this.error = error;\n  }\n  setCities(cities) {\n    this.cities = cities;\n  }\n  setCurrentSearchQuery(query) {\n    this.currentSearchQuery = query;\n  }\n\n  // Получение списка городов из БД\n  async fetchCities() {\n    try {\n      const response = await fetch('http://localhost:5000/api/prod/cities');\n      if (response.ok) {\n        const data = await response.json();\n        this.setCities(data);\n        return data;\n      }\n    } catch (error) {\n      console.error('Ошибка при получении городов:', error);\n    }\n    return [];\n  }\n\n  // Получение всех продуктов (с пагинацией и фильтрами)\n  async fetchProducts(filters = {}) {\n    this.setLoading(true);\n    this.setError(null);\n    this.setCurrentSearchQuery(''); // Сбрасываем поисковый запрос\n\n    try {\n      let url = `http://localhost:5000/api/prod?page=${this.page}&limit=${this.limit}`;\n      const queryParams = new URLSearchParams();\n      if (filters.typeId) {\n        queryParams.append('typeId', filters.typeId);\n      }\n      if (filters.sellerId) {\n        queryParams.append('sellerId', filters.sellerId);\n      }\n      if (this.selectedCity) {\n        queryParams.append('city', this.selectedCity);\n      }\n      const queryString = queryParams.toString();\n      if (queryString) {\n        url += `&${queryString}`;\n      }\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      this.setProducts(data.rows || data);\n      this.setTotalCount(data.count || data.length);\n    } catch (error) {\n      console.error('Ошибка при получении продуктов:', error);\n      this.setError('Не удалось загрузить товары');\n      this.setProducts([]);\n      this.setTotalCount(0);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Получение продуктов по конкретному городу\n  async fetchProductsByCity(city) {\n    this.setLoading(true);\n    this.setError(null);\n    this.setSelectedCity(city);\n    this.setCurrentSearchQuery(''); // Сбрасываем поисковый запрос\n\n    try {\n      const response = await fetch(`http://localhost:5000/api/prod/city/${encodeURIComponent(city)}`);\n      if (!response.ok) {\n        // Если товаров для города нет, пробуем загрузить все\n        await this.fetchProducts();\n        return;\n      }\n      const data = await response.json();\n      this.setProducts(data);\n      this.setTotalCount(data.length);\n    } catch (error) {\n      console.error('Ошибка при получении продуктов по городу:', error);\n      this.setError(`Не удалось загрузить товары для города ${city}`);\n      await this.fetchProducts();\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Поиск товаров\n  async searchProducts(searchQuery, filters = {}) {\n    this.setLoading(true);\n    this.setError(null);\n    this.setCurrentSearchQuery(searchQuery);\n    try {\n      const queryParams = new URLSearchParams({\n        q: searchQuery,\n        page: this.page,\n        limit: this.limit,\n        ...(filters.city && filters.city !== 'all' && {\n          city: filters.city\n        }),\n        ...(filters.typeId && filters.typeId !== 'all' && {\n          typeId: filters.typeId\n        })\n      });\n      const response = await fetch(`http://localhost:5000/api/prod/search?${queryParams}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      this.setProducts(data.products || []);\n      this.setTotalCount(data.totalCount || 0);\n    } catch (error) {\n      console.error('Ошибка при поиске товаров:', error);\n      this.setError('Не удалось выполнить поиск');\n      this.setProducts([]);\n      this.setTotalCount(0);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Получение одного продукта по ID\n  async fetchProductById(id) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const response = await fetch(`http://localhost:5000/api/prod/prod/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Ошибка при получении продукта:', error);\n      this.setError('Не удалось загрузить информацию о товаре');\n      return null;\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Сброс фильтров\n  async resetFilters() {\n    this.setSelectedCity('');\n    this.setCurrentSearchQuery('');\n    sessionStorage.removeItem('city');\n    await this.fetchProducts();\n  }\n\n  // Получение текущего города\n  get currentCity() {\n    return this.selectedCity || sessionStorage.getItem('city') || 'Выберите город';\n  }\n\n  // Есть ли выбранный город\n  get hasSelectedCity() {\n    return !!this.selectedCity;\n  }\n\n  // Есть ли активный поиск\n  get hasActiveSearch() {\n    return !!this.currentSearchQuery;\n  }\n}\n\n// Создаем экземпляр store\nexport const productStore = new ProductStore();","map":{"version":3,"names":["makeAutoObservable","ProductStore","constructor","products","totalCount","limit","page","selectedCity","isLoading","error","cities","currentSearchQuery","initializeCity","savedCity","sessionStorage","getItem","setProducts","setTotalCount","count","setPage","setSelectedCity","city","setItem","setLoading","loading","setError","setCities","setCurrentSearchQuery","query","fetchCities","response","fetch","ok","data","json","console","fetchProducts","filters","url","queryParams","URLSearchParams","typeId","append","sellerId","queryString","toString","Error","status","rows","length","fetchProductsByCity","encodeURIComponent","searchProducts","searchQuery","q","fetchProductById","id","resetFilters","removeItem","currentCity","hasSelectedCity","hasActiveSearch","productStore"],"sources":["D:/nkurs/client/src/store/ProductStore.js"],"sourcesContent":["// store/ProductStore.js\r\nimport { makeAutoObservable } from 'mobx';\r\n\r\nclass ProductStore {\r\n    products = [];\r\n    totalCount = 0;\r\n    limit = 9;\r\n    page = 1;\r\n    selectedCity = '';\r\n    isLoading = false;\r\n    error = null;\r\n    cities = [];\r\n    currentSearchQuery = '';\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.initializeCity();\r\n    }\r\n\r\n    // Инициализация города при загрузке store\r\n    initializeCity() {\r\n        const savedCity = sessionStorage.getItem('city');\r\n        if (savedCity) {\r\n            this.selectedCity = savedCity;\r\n        }\r\n    }\r\n\r\n    setProducts(products) {\r\n        this.products = products;\r\n    }\r\n\r\n    setTotalCount(count) {\r\n        this.totalCount = count;\r\n    }\r\n\r\n    setPage(page) {\r\n        this.page = page;\r\n    }\r\n\r\n    setSelectedCity(city) {\r\n        this.selectedCity = city;\r\n        sessionStorage.setItem('city', city);\r\n    }\r\n\r\n    setLoading(loading) {\r\n        this.isLoading = loading;\r\n    }\r\n\r\n    setError(error) {\r\n        this.error = error;\r\n    }\r\n\r\n    setCities(cities) {\r\n        this.cities = cities;\r\n    }\r\n\r\n    setCurrentSearchQuery(query) {\r\n        this.currentSearchQuery = query;\r\n    }\r\n\r\n    // Получение списка городов из БД\r\n    async fetchCities() {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/prod/cities');\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                this.setCities(data);\r\n                return data;\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при получении городов:', error);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    // Получение всех продуктов (с пагинацией и фильтрами)\r\n    async fetchProducts(filters = {}) {\r\n        this.setLoading(true);\r\n        this.setError(null);\r\n        this.setCurrentSearchQuery(''); // Сбрасываем поисковый запрос\r\n        \r\n        try {\r\n            let url = `http://localhost:5000/api/prod?page=${this.page}&limit=${this.limit}`;\r\n            \r\n            const queryParams = new URLSearchParams();\r\n            \r\n            if (filters.typeId) {\r\n                queryParams.append('typeId', filters.typeId);\r\n            }\r\n            if (filters.sellerId) {\r\n                queryParams.append('sellerId', filters.sellerId);\r\n            }\r\n            if (this.selectedCity) {\r\n                queryParams.append('city', this.selectedCity);\r\n            }\r\n            \r\n            const queryString = queryParams.toString();\r\n            if (queryString) {\r\n                url += `&${queryString}`;\r\n            }\r\n\r\n            const response = await fetch(url);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            this.setProducts(data.rows || data);\r\n            this.setTotalCount(data.count || data.length);\r\n            \r\n        } catch (error) {\r\n            console.error('Ошибка при получении продуктов:', error);\r\n            this.setError('Не удалось загрузить товары');\r\n            this.setProducts([]);\r\n            this.setTotalCount(0);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Получение продуктов по конкретному городу\r\n    async fetchProductsByCity(city) {\r\n        this.setLoading(true);\r\n        this.setError(null);\r\n        this.setSelectedCity(city);\r\n        this.setCurrentSearchQuery(''); // Сбрасываем поисковый запрос\r\n        \r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/prod/city/${encodeURIComponent(city)}`);\r\n            \r\n            if (!response.ok) {\r\n                // Если товаров для города нет, пробуем загрузить все\r\n                await this.fetchProducts();\r\n                return;\r\n            }\r\n            \r\n            const data = await response.json();\r\n            this.setProducts(data);\r\n            this.setTotalCount(data.length);\r\n            \r\n        } catch (error) {\r\n            console.error('Ошибка при получении продуктов по городу:', error);\r\n            this.setError(`Не удалось загрузить товары для города ${city}`);\r\n            await this.fetchProducts();\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Поиск товаров\r\n    async searchProducts(searchQuery, filters = {}) {\r\n        this.setLoading(true);\r\n        this.setError(null);\r\n        this.setCurrentSearchQuery(searchQuery);\r\n        \r\n        try {\r\n            const queryParams = new URLSearchParams({\r\n                q: searchQuery,\r\n                page: this.page,\r\n                limit: this.limit,\r\n                ...(filters.city && filters.city !== 'all' && { city: filters.city }),\r\n                ...(filters.typeId && filters.typeId !== 'all' && { typeId: filters.typeId })\r\n            });\r\n\r\n            const response = await fetch(`http://localhost:5000/api/prod/search?${queryParams}`);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            this.setProducts(data.products || []);\r\n            this.setTotalCount(data.totalCount || 0);\r\n            \r\n        } catch (error) {\r\n            console.error('Ошибка при поиске товаров:', error);\r\n            this.setError('Не удалось выполнить поиск');\r\n            this.setProducts([]);\r\n            this.setTotalCount(0);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Получение одного продукта по ID\r\n    async fetchProductById(id) {\r\n        this.setLoading(true);\r\n        this.setError(null);\r\n        \r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/prod/prod/${id}`);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            return data;\r\n            \r\n        } catch (error) {\r\n            console.error('Ошибка при получении продукта:', error);\r\n            this.setError('Не удалось загрузить информацию о товаре');\r\n            return null;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Сброс фильтров\r\n    async resetFilters() {\r\n        this.setSelectedCity('');\r\n        this.setCurrentSearchQuery('');\r\n        sessionStorage.removeItem('city');\r\n        await this.fetchProducts();\r\n    }\r\n\r\n    // Получение текущего города\r\n    get currentCity() {\r\n        return this.selectedCity || sessionStorage.getItem('city') || 'Выберите город';\r\n    }\r\n\r\n    // Есть ли выбранный город\r\n    get hasSelectedCity() {\r\n        return !!this.selectedCity;\r\n    }\r\n\r\n    // Есть ли активный поиск\r\n    get hasActiveSearch() {\r\n        return !!this.currentSearchQuery;\r\n    }\r\n}\r\n\r\n// Создаем экземпляр store\r\nexport const productStore = new ProductStore();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}