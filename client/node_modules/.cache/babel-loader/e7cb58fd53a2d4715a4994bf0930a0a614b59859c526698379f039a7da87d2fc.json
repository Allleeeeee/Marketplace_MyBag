{"ast":null,"code":"var _jsxFileName = \"D:\\\\nkurs\\\\client\\\\src\\\\components\\\\CityDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport geo from '../assets/geo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cities = [\"Минск\", \"Брест\", \"Гомель\", \"Гродно\", \"Могилев\", \"Витебск\", \"Пинск\", \"Барановичи\", \"Бобруйск\", \"Слонім\", \"Лида\", \"Орша\", \"Мозырь\", \"Слуцк\", \"Новополоцк\", \"Светлогорск\", \"Жлобин\"];\nconst CityDisplay = () => {\n  _s();\n  const [city, setCity] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  useEffect(() => {\n    const getCity = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`);\n          const data = await response.json();\n          const currentCity = data.locality || 'Неизвестный город';\n          setCity(currentCity);\n          setSelectedCity(currentCity); // Устанавливаем текущее местоположение как выбранный город\n          sessionStorage.setItem('city', currentCity);\n        });\n      }\n    };\n    getCity();\n  }, []);\n  const handleCityChange = e => {\n    const newCity = e.target.value;\n    setSelectedCity(newCity);\n    setCity(newCity); // Обновляем текущий город на выбранный\n    sessionStorage.setItem('city', newCity); // Сохраняем выбранный город\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: geo,\n      style: {\n        width: '40px',\n        height: '40px'\n      },\n      alt: \"\\u0413\\u0435\\u043E\\u043B\\u043E\\u043A\\u0430\\u0446\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCity,\n      onChange: handleCityChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        disabled: true,\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), cities.map(cityName => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: cityName,\n        children: cityName\n      }, cityName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(CityDisplay, \"Da9X1BkFdQHjjCq7H0JYd7hYl9U=\");\n_c = CityDisplay;\nexport default CityDisplay;\nvar _c;\n$RefreshReg$(_c, \"CityDisplay\");","map":{"version":3,"names":["React","useEffect","useState","geo","jsxDEV","_jsxDEV","cities","CityDisplay","_s","city","setCity","selectedCity","setSelectedCity","getCity","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","response","fetch","data","json","currentCity","locality","sessionStorage","setItem","handleCityChange","e","newCity","target","value","children","src","style","width","height","alt","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","map","cityName","_c","$RefreshReg$"],"sources":["D:/nkurs/client/src/components/CityDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport geo from '../assets/geo.png'; \r\n\r\nconst cities = [\r\n    \"Минск\",\r\n    \"Брест\",\r\n    \"Гомель\",\r\n    \"Гродно\",\r\n    \"Могилев\",\r\n    \"Витебск\",\r\n    \"Пинск\",\r\n    \"Барановичи\",\r\n    \"Бобруйск\",\r\n    \"Слонім\",\r\n    \"Лида\",\r\n    \"Орша\",\r\n    \"Мозырь\",\r\n    \"Слуцк\",\r\n    \"Новополоцк\",\r\n    \"Светлогорск\",\r\n    \"Жлобин\"\r\n];\r\n\r\nconst CityDisplay = () => {\r\n    const [city, setCity] = useState(''); \r\n    const [selectedCity, setSelectedCity] = useState('');\r\n\r\n    useEffect(() => {\r\n        const getCity = async () => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(async (position) => {\r\n                    const { latitude, longitude } = position.coords;\r\n                    const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`);\r\n                    const data = await response.json();\r\n                    const currentCity = data.locality || 'Неизвестный город';\r\n                    setCity(currentCity); \r\n                    setSelectedCity(currentCity); // Устанавливаем текущее местоположение как выбранный город\r\n                    sessionStorage.setItem('city', currentCity); \r\n                });\r\n            }\r\n        };\r\n\r\n        getCity();\r\n    }, []);\r\n\r\n    const handleCityChange = (e) => {\r\n        const newCity = e.target.value;\r\n        setSelectedCity(newCity);\r\n        setCity(newCity); // Обновляем текущий город на выбранный\r\n        sessionStorage.setItem('city', newCity); // Сохраняем выбранный город\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <img src={geo} style={{ width: '40px', height: '40px'}} alt=\"Геолокация\" />\r\n            <h5>{city}</h5>\r\n            <select value={selectedCity} onChange={handleCityChange}>\r\n                <option value=\"\" disabled>Выберите город</option>\r\n                {cities.map((cityName) => (\r\n                    <option key={cityName} value={cityName}>{cityName}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}