{"ast":null,"code":"var _jsxFileName = \"D:\\\\nkurs\\\\client\\\\src\\\\components\\\\CityDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport geo from '../assets/geo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityDisplay = () => {\n  _s();\n  const [city, setCity] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [cities, setCities] = useState([]);\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const response = await fetch('https://example.com/api/cities'); // Замените на ваш URL API\n        const data = await response.json();\n        setCities(data); // Предполагаем, что API возвращает массив городов\n      } catch (error) {\n        console.error('Ошибка при загрузке городов:', error);\n      }\n    };\n    const getCity = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`);\n          const data = await response.json();\n          const currentCity = data.locality || 'Неизвестный город';\n          setCity(currentCity);\n          setSelectedCity(currentCity); // Устанавливаем текущее местоположение как выбранный город\n          sessionStorage.setItem('city', currentCity);\n        });\n      }\n    };\n    fetchCities();\n    getCity();\n  }, []);\n  const handleCityChange = e => {\n    setSelectedCity(e.target.value);\n    sessionStorage.setItem('city', e.target.value); // Сохраняем выбранный город\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: geo,\n      style: {\n        width: '40px',\n        height: '40px'\n      },\n      alt: \"\\u0413\\u0435\\u043E\\u043B\\u043E\\u043A\\u0430\\u0446\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0438\\u0439 \\u0433\\u043E\\u0440\\u043E\\u0434: \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCity,\n      onChange: handleCityChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        disabled: true,\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), cities.map(cityName => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: cityName,\n        children: cityName\n      }, cityName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(CityDisplay, \"OYQfBHI/NwQ2vBUdPOMt2nLOwiE=\");\n_c = CityDisplay;\nexport default CityDisplay;\nvar _c;\n$RefreshReg$(_c, \"CityDisplay\");","map":{"version":3,"names":["React","useEffect","useState","geo","jsxDEV","_jsxDEV","CityDisplay","_s","city","setCity","selectedCity","setSelectedCity","cities","setCities","fetchCities","response","fetch","data","json","error","console","getCity","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","currentCity","locality","sessionStorage","setItem","handleCityChange","e","target","value","children","src","style","width","height","alt","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","map","cityName","_c","$RefreshReg$"],"sources":["D:/nkurs/client/src/components/CityDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport geo from '../assets/geo.png'; \r\n\r\nconst CityDisplay = () => {\r\n    const [city, setCity] = useState(''); \r\n    const [selectedCity, setSelectedCity] = useState('');\r\n    const [cities, setCities] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCities = async () => {\r\n            try {\r\n                const response = await fetch('https://example.com/api/cities'); // Замените на ваш URL API\r\n                const data = await response.json();\r\n                setCities(data); // Предполагаем, что API возвращает массив городов\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке городов:', error);\r\n            }\r\n        };\r\n\r\n        const getCity = async () => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(async (position) => {\r\n                    const { latitude, longitude } = position.coords;\r\n                    const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`);\r\n                    const data = await response.json();\r\n                    const currentCity = data.locality || 'Неизвестный город';\r\n                    setCity(currentCity); \r\n                    setSelectedCity(currentCity); // Устанавливаем текущее местоположение как выбранный город\r\n                    sessionStorage.setItem('city', currentCity); \r\n                });\r\n            }\r\n        };\r\n\r\n        fetchCities();\r\n        getCity();\r\n    }, []);\r\n\r\n    const handleCityChange = (e) => {\r\n        setSelectedCity(e.target.value);\r\n        sessionStorage.setItem('city', e.target.value); // Сохраняем выбранный город\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <img src={geo} style={{ width: '40px', height: '40px'}} alt=\"Геолокация\" />\r\n            <h5>Текущий город: {city}</h5>\r\n            <select value={selectedCity} onChange={handleCityChange}>\r\n                <option value=\"\" disabled>Выберите город</option>\r\n                {cities.map((cityName) => (\r\n                    <option key={cityName} value={cityName}>{cityName}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}